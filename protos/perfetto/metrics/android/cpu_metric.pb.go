//
// Copyright (C) 2019 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.3
// source: perfetto/metrics/android/cpu_metric.proto

package android

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AndroidCpuMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessInfo []*AndroidCpuMetric_Process `protobuf:"bytes,1,rep,name=process_info,json=processInfo" json:"process_info,omitempty"`
}

func (x *AndroidCpuMetric) Reset() {
	*x = AndroidCpuMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_android_cpu_metric_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidCpuMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidCpuMetric) ProtoMessage() {}

func (x *AndroidCpuMetric) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_android_cpu_metric_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidCpuMetric.ProtoReflect.Descriptor instead.
func (*AndroidCpuMetric) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_android_cpu_metric_proto_rawDescGZIP(), []int{0}
}

func (x *AndroidCpuMetric) GetProcessInfo() []*AndroidCpuMetric_Process {
	if x != nil {
		return x.ProcessInfo
	}
	return nil
}

// Next id: 6
type AndroidCpuMetric_Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CPU megacycles (i.e. cycles divided by 1e6).
	Mcycles *int64 `protobuf:"varint,1,opt,name=mcycles" json:"mcycles,omitempty"`
	// Total time the thread was running for this breakdown in
	// nanoseconds.
	RuntimeNs *int64 `protobuf:"varint,2,opt,name=runtime_ns,json=runtimeNs" json:"runtime_ns,omitempty"`
	// Min/max/average CPU frequency weighted by the time the CPU was
	// running at each frequency in this breakdown.
	MinFreqKhz *int64 `protobuf:"varint,3,opt,name=min_freq_khz,json=minFreqKhz" json:"min_freq_khz,omitempty"`
	MaxFreqKhz *int64 `protobuf:"varint,4,opt,name=max_freq_khz,json=maxFreqKhz" json:"max_freq_khz,omitempty"`
	AvgFreqKhz *int64 `protobuf:"varint,5,opt,name=avg_freq_khz,json=avgFreqKhz" json:"avg_freq_khz,omitempty"`
}

func (x *AndroidCpuMetric_Metrics) Reset() {
	*x = AndroidCpuMetric_Metrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_android_cpu_metric_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidCpuMetric_Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidCpuMetric_Metrics) ProtoMessage() {}

func (x *AndroidCpuMetric_Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_android_cpu_metric_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidCpuMetric_Metrics.ProtoReflect.Descriptor instead.
func (*AndroidCpuMetric_Metrics) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_android_cpu_metric_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AndroidCpuMetric_Metrics) GetMcycles() int64 {
	if x != nil && x.Mcycles != nil {
		return *x.Mcycles
	}
	return 0
}

func (x *AndroidCpuMetric_Metrics) GetRuntimeNs() int64 {
	if x != nil && x.RuntimeNs != nil {
		return *x.RuntimeNs
	}
	return 0
}

func (x *AndroidCpuMetric_Metrics) GetMinFreqKhz() int64 {
	if x != nil && x.MinFreqKhz != nil {
		return *x.MinFreqKhz
	}
	return 0
}

func (x *AndroidCpuMetric_Metrics) GetMaxFreqKhz() int64 {
	if x != nil && x.MaxFreqKhz != nil {
		return *x.MaxFreqKhz
	}
	return 0
}

func (x *AndroidCpuMetric_Metrics) GetAvgFreqKhz() int64 {
	if x != nil && x.AvgFreqKhz != nil {
		return *x.AvgFreqKhz
	}
	return 0
}

// Next id: 7
type AndroidCpuMetric_CoreData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *uint32                   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Metrics *AndroidCpuMetric_Metrics `protobuf:"bytes,6,opt,name=metrics" json:"metrics,omitempty"`
}

func (x *AndroidCpuMetric_CoreData) Reset() {
	*x = AndroidCpuMetric_CoreData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_android_cpu_metric_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidCpuMetric_CoreData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidCpuMetric_CoreData) ProtoMessage() {}

func (x *AndroidCpuMetric_CoreData) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_android_cpu_metric_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidCpuMetric_CoreData.ProtoReflect.Descriptor instead.
func (*AndroidCpuMetric_CoreData) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_android_cpu_metric_proto_rawDescGZIP(), []int{0, 1}
}

func (x *AndroidCpuMetric_CoreData) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *AndroidCpuMetric_CoreData) GetMetrics() *AndroidCpuMetric_Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// Next id: 3
type AndroidCpuMetric_CoreTypeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *string                   `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Metrics *AndroidCpuMetric_Metrics `protobuf:"bytes,2,opt,name=metrics" json:"metrics,omitempty"`
}

func (x *AndroidCpuMetric_CoreTypeData) Reset() {
	*x = AndroidCpuMetric_CoreTypeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_android_cpu_metric_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidCpuMetric_CoreTypeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidCpuMetric_CoreTypeData) ProtoMessage() {}

func (x *AndroidCpuMetric_CoreTypeData) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_android_cpu_metric_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidCpuMetric_CoreTypeData.ProtoReflect.Descriptor instead.
func (*AndroidCpuMetric_CoreTypeData) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_android_cpu_metric_proto_rawDescGZIP(), []int{0, 2}
}

func (x *AndroidCpuMetric_CoreTypeData) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *AndroidCpuMetric_CoreTypeData) GetMetrics() *AndroidCpuMetric_Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// Next id: 7
type AndroidCpuMetric_Thread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *string                   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Metrics *AndroidCpuMetric_Metrics `protobuf:"bytes,4,opt,name=metrics" json:"metrics,omitempty"`
	// Breakdowns of above metrics.
	Core     []*AndroidCpuMetric_CoreData     `protobuf:"bytes,2,rep,name=core" json:"core,omitempty"`
	CoreType []*AndroidCpuMetric_CoreTypeData `protobuf:"bytes,5,rep,name=core_type,json=coreType" json:"core_type,omitempty"`
}

func (x *AndroidCpuMetric_Thread) Reset() {
	*x = AndroidCpuMetric_Thread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_android_cpu_metric_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidCpuMetric_Thread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidCpuMetric_Thread) ProtoMessage() {}

func (x *AndroidCpuMetric_Thread) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_android_cpu_metric_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidCpuMetric_Thread.ProtoReflect.Descriptor instead.
func (*AndroidCpuMetric_Thread) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_android_cpu_metric_proto_rawDescGZIP(), []int{0, 3}
}

func (x *AndroidCpuMetric_Thread) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AndroidCpuMetric_Thread) GetMetrics() *AndroidCpuMetric_Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *AndroidCpuMetric_Thread) GetCore() []*AndroidCpuMetric_CoreData {
	if x != nil {
		return x.Core
	}
	return nil
}

func (x *AndroidCpuMetric_Thread) GetCoreType() []*AndroidCpuMetric_CoreTypeData {
	if x != nil {
		return x.CoreType
	}
	return nil
}

// Next id: 8
type AndroidCpuMetric_Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *string                   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Metrics *AndroidCpuMetric_Metrics `protobuf:"bytes,4,opt,name=metrics" json:"metrics,omitempty"`
	// Breakdowns of above metrics.
	Threads  []*AndroidCpuMetric_Thread       `protobuf:"bytes,6,rep,name=threads" json:"threads,omitempty"`
	Core     []*AndroidCpuMetric_CoreData     `protobuf:"bytes,7,rep,name=core" json:"core,omitempty"`
	CoreType []*AndroidCpuMetric_CoreTypeData `protobuf:"bytes,5,rep,name=core_type,json=coreType" json:"core_type,omitempty"`
}

func (x *AndroidCpuMetric_Process) Reset() {
	*x = AndroidCpuMetric_Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_android_cpu_metric_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidCpuMetric_Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidCpuMetric_Process) ProtoMessage() {}

func (x *AndroidCpuMetric_Process) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_android_cpu_metric_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidCpuMetric_Process.ProtoReflect.Descriptor instead.
func (*AndroidCpuMetric_Process) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_android_cpu_metric_proto_rawDescGZIP(), []int{0, 4}
}

func (x *AndroidCpuMetric_Process) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AndroidCpuMetric_Process) GetMetrics() *AndroidCpuMetric_Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *AndroidCpuMetric_Process) GetThreads() []*AndroidCpuMetric_Thread {
	if x != nil {
		return x.Threads
	}
	return nil
}

func (x *AndroidCpuMetric_Process) GetCore() []*AndroidCpuMetric_CoreData {
	if x != nil {
		return x.Core
	}
	return nil
}

func (x *AndroidCpuMetric_Process) GetCoreType() []*AndroidCpuMetric_CoreTypeData {
	if x != nil {
		return x.CoreType
	}
	return nil
}

var File_perfetto_metrics_android_cpu_metric_proto protoreflect.FileDescriptor

var file_perfetto_metrics_android_cpu_metric_proto_rawDesc = []byte{
	0x0a, 0x29, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2f, 0x63, 0x70, 0x75, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x22, 0x8e, 0x08, 0x0a,
	0x10, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x43, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x4c, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x43, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0xa8, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x4e, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x5f, 0x6b, 0x68, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x46,
	0x72, 0x65, 0x71, 0x4b, 0x68, 0x7a, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x72,
	0x65, 0x71, 0x5f, 0x6b, 0x68, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x46, 0x72, 0x65, 0x71, 0x4b, 0x68, 0x7a, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x76, 0x67, 0x5f,
	0x66, 0x72, 0x65, 0x71, 0x5f, 0x6b, 0x68, 0x7a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x61, 0x76, 0x67, 0x46, 0x72, 0x65, 0x71, 0x4b, 0x68, 0x7a, 0x1a, 0x65, 0x0a, 0x08, 0x43, 0x6f,
	0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x43, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x06, 0x1a, 0x67, 0x0a, 0x0c, 0x43, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x43, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0xf4, 0x01, 0x0a, 0x06, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x43, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3e,
	0x0a, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x43, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x43, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4b,
	0x0a, 0x09, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x43, 0x70, 0x75, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4a, 0x04, 0x08, 0x03, 0x10,
	0x04, 0x1a, 0xb9, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x43, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x43, 0x70, 0x75, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x43, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x04, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x43, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x43, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x43, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x63,
	0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x42, 0x09, 0x5a,
	0x07, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
}

var (
	file_perfetto_metrics_android_cpu_metric_proto_rawDescOnce sync.Once
	file_perfetto_metrics_android_cpu_metric_proto_rawDescData = file_perfetto_metrics_android_cpu_metric_proto_rawDesc
)

func file_perfetto_metrics_android_cpu_metric_proto_rawDescGZIP() []byte {
	file_perfetto_metrics_android_cpu_metric_proto_rawDescOnce.Do(func() {
		file_perfetto_metrics_android_cpu_metric_proto_rawDescData = protoimpl.X.CompressGZIP(file_perfetto_metrics_android_cpu_metric_proto_rawDescData)
	})
	return file_perfetto_metrics_android_cpu_metric_proto_rawDescData
}

var file_perfetto_metrics_android_cpu_metric_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_perfetto_metrics_android_cpu_metric_proto_goTypes = []interface{}{
	(*AndroidCpuMetric)(nil),              // 0: perfetto.protos.AndroidCpuMetric
	(*AndroidCpuMetric_Metrics)(nil),      // 1: perfetto.protos.AndroidCpuMetric.Metrics
	(*AndroidCpuMetric_CoreData)(nil),     // 2: perfetto.protos.AndroidCpuMetric.CoreData
	(*AndroidCpuMetric_CoreTypeData)(nil), // 3: perfetto.protos.AndroidCpuMetric.CoreTypeData
	(*AndroidCpuMetric_Thread)(nil),       // 4: perfetto.protos.AndroidCpuMetric.Thread
	(*AndroidCpuMetric_Process)(nil),      // 5: perfetto.protos.AndroidCpuMetric.Process
}
var file_perfetto_metrics_android_cpu_metric_proto_depIdxs = []int32{
	5,  // 0: perfetto.protos.AndroidCpuMetric.process_info:type_name -> perfetto.protos.AndroidCpuMetric.Process
	1,  // 1: perfetto.protos.AndroidCpuMetric.CoreData.metrics:type_name -> perfetto.protos.AndroidCpuMetric.Metrics
	1,  // 2: perfetto.protos.AndroidCpuMetric.CoreTypeData.metrics:type_name -> perfetto.protos.AndroidCpuMetric.Metrics
	1,  // 3: perfetto.protos.AndroidCpuMetric.Thread.metrics:type_name -> perfetto.protos.AndroidCpuMetric.Metrics
	2,  // 4: perfetto.protos.AndroidCpuMetric.Thread.core:type_name -> perfetto.protos.AndroidCpuMetric.CoreData
	3,  // 5: perfetto.protos.AndroidCpuMetric.Thread.core_type:type_name -> perfetto.protos.AndroidCpuMetric.CoreTypeData
	1,  // 6: perfetto.protos.AndroidCpuMetric.Process.metrics:type_name -> perfetto.protos.AndroidCpuMetric.Metrics
	4,  // 7: perfetto.protos.AndroidCpuMetric.Process.threads:type_name -> perfetto.protos.AndroidCpuMetric.Thread
	2,  // 8: perfetto.protos.AndroidCpuMetric.Process.core:type_name -> perfetto.protos.AndroidCpuMetric.CoreData
	3,  // 9: perfetto.protos.AndroidCpuMetric.Process.core_type:type_name -> perfetto.protos.AndroidCpuMetric.CoreTypeData
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_perfetto_metrics_android_cpu_metric_proto_init() }
func file_perfetto_metrics_android_cpu_metric_proto_init() {
	if File_perfetto_metrics_android_cpu_metric_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_perfetto_metrics_android_cpu_metric_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidCpuMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_android_cpu_metric_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidCpuMetric_Metrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_android_cpu_metric_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidCpuMetric_CoreData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_android_cpu_metric_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidCpuMetric_CoreTypeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_android_cpu_metric_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidCpuMetric_Thread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_android_cpu_metric_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidCpuMetric_Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_perfetto_metrics_android_cpu_metric_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_perfetto_metrics_android_cpu_metric_proto_goTypes,
		DependencyIndexes: file_perfetto_metrics_android_cpu_metric_proto_depIdxs,
		MessageInfos:      file_perfetto_metrics_android_cpu_metric_proto_msgTypes,
	}.Build()
	File_perfetto_metrics_android_cpu_metric_proto = out.File
	file_perfetto_metrics_android_cpu_metric_proto_rawDesc = nil
	file_perfetto_metrics_android_cpu_metric_proto_goTypes = nil
	file_perfetto_metrics_android_cpu_metric_proto_depIdxs = nil
}
