// AUTOGENERATED - DO NOT EDIT
// ---------------------------
// This file has been generated by
// AOSP://external/perfetto/tools/gen_merged_protos
// merging the perfetto config protos.
// This fused proto is intended to be copied in:
//  - Android tree, for statsd.
//  - Google internal repos.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.3
// source: perfetto/metrics/perfetto_merged_metrics.proto

package metrics

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AndroidBatteryMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Battery counters info for each ts of the trace. This should only be
	// extracted for short traces.
	BatteryCounters   []*AndroidBatteryMetric_BatteryCounters `protobuf:"bytes,1,rep,name=battery_counters,json=batteryCounters" json:"battery_counters,omitempty"`
	BatteryAggregates *AndroidBatteryMetric_BatteryAggregates `protobuf:"bytes,2,opt,name=battery_aggregates,json=batteryAggregates" json:"battery_aggregates,omitempty"`
}

func (x *AndroidBatteryMetric) Reset() {
	*x = AndroidBatteryMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidBatteryMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidBatteryMetric) ProtoMessage() {}

func (x *AndroidBatteryMetric) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidBatteryMetric.ProtoReflect.Descriptor instead.
func (*AndroidBatteryMetric) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *AndroidBatteryMetric) GetBatteryCounters() []*AndroidBatteryMetric_BatteryCounters {
	if x != nil {
		return x.BatteryCounters
	}
	return nil
}

func (x *AndroidBatteryMetric) GetBatteryAggregates() *AndroidBatteryMetric_BatteryAggregates {
	if x != nil {
		return x.BatteryAggregates
	}
	return nil
}

type AndroidCpuMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessInfo []*AndroidCpuMetric_Process `protobuf:"bytes,1,rep,name=process_info,json=processInfo" json:"process_info,omitempty"`
}

func (x *AndroidCpuMetric) Reset() {
	*x = AndroidCpuMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidCpuMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidCpuMetric) ProtoMessage() {}

func (x *AndroidCpuMetric) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidCpuMetric.ProtoReflect.Descriptor instead.
func (*AndroidCpuMetric) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{1}
}

func (x *AndroidCpuMetric) GetProcessInfo() []*AndroidCpuMetric_Process {
	if x != nil {
		return x.ProcessInfo
	}
	return nil
}

type AndroidDisplayMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Stat that reports the number of duplicate frames submitted
	// to the display for rendering. That is frames that have the same
	// pixels values but where still submitted. It is tracked based on
	// comparing the MISR of the current frame vs previous frame.
	TotalDuplicateFrames *uint32 `protobuf:"varint,1,opt,name=total_duplicate_frames,json=totalDuplicateFrames" json:"total_duplicate_frames,omitempty"`
	// Stat reports whether there is any duplicate_frames tracked
	DuplicateFramesLogged *uint32 `protobuf:"varint,2,opt,name=duplicate_frames_logged,json=duplicateFramesLogged" json:"duplicate_frames_logged,omitempty"`
}

func (x *AndroidDisplayMetrics) Reset() {
	*x = AndroidDisplayMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidDisplayMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidDisplayMetrics) ProtoMessage() {}

func (x *AndroidDisplayMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidDisplayMetrics.ProtoReflect.Descriptor instead.
func (*AndroidDisplayMetrics) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{2}
}

func (x *AndroidDisplayMetrics) GetTotalDuplicateFrames() uint32 {
	if x != nil && x.TotalDuplicateFrames != nil {
		return *x.TotalDuplicateFrames
	}
	return 0
}

func (x *AndroidDisplayMetrics) GetDuplicateFramesLogged() uint32 {
	if x != nil && x.DuplicateFramesLogged != nil {
		return *x.DuplicateFramesLogged
	}
	return 0
}

type AndroidProcessMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Process name. Usually, cmdline or <package_name>(:<custom_name>)?.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// User id under which this process runs.
	Uid *int64 `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	// Package that this process belongs to.
	//
	// If this process shares its uid (see `packages_for_uid` field), the package
	// is determined based on the process name and package name. If there is no
	// match this field is empty.
	Package *AndroidProcessMetadata_Package `protobuf:"bytes,7,opt,name=package" json:"package,omitempty"`
	// All packages using this uid.
	//
	// Shared uid documentation:
	// https://developer.android.com/guide/topics/manifest/manifest-element#uid
	PackagesForUid []*AndroidProcessMetadata_Package `protobuf:"bytes,8,rep,name=packages_for_uid,json=packagesForUid" json:"packages_for_uid,omitempty"`
}

func (x *AndroidProcessMetadata) Reset() {
	*x = AndroidProcessMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidProcessMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidProcessMetadata) ProtoMessage() {}

func (x *AndroidProcessMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidProcessMetadata.ProtoReflect.Descriptor instead.
func (*AndroidProcessMetadata) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{3}
}

func (x *AndroidProcessMetadata) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AndroidProcessMetadata) GetUid() int64 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *AndroidProcessMetadata) GetPackage() *AndroidProcessMetadata_Package {
	if x != nil {
		return x.Package
	}
	return nil
}

func (x *AndroidProcessMetadata) GetPackagesForUid() []*AndroidProcessMetadata_Package {
	if x != nil {
		return x.PackagesForUid
	}
	return nil
}

type HeapProfileCallsites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceStats []*HeapProfileCallsites_InstanceStats `protobuf:"bytes,1,rep,name=instance_stats,json=instanceStats" json:"instance_stats,omitempty"`
}

func (x *HeapProfileCallsites) Reset() {
	*x = HeapProfileCallsites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeapProfileCallsites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeapProfileCallsites) ProtoMessage() {}

func (x *HeapProfileCallsites) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeapProfileCallsites.ProtoReflect.Descriptor instead.
func (*HeapProfileCallsites) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{4}
}

func (x *HeapProfileCallsites) GetInstanceStats() []*HeapProfileCallsites_InstanceStats {
	if x != nil {
		return x.InstanceStats
	}
	return nil
}

// Android HWUI graphics performance and graphics memory usage metrics.
type ProcessRenderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the package launched
	ProcessName *string `protobuf:"bytes,1,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	// CPU time spent on RenderThread in milliseconds.
	RtCpuTimeMs *int64 `protobuf:"varint,2,opt,name=rt_cpu_time_ms,json=rtCpuTimeMs" json:"rt_cpu_time_ms,omitempty"`
	// Number of frames drawn on RenderThread, followed by max/min/avg CPU time to draw a frame
	// in nanoseconds.
	DrawFrameCount *uint32  `protobuf:"varint,3,opt,name=draw_frame_count,json=drawFrameCount" json:"draw_frame_count,omitempty"`
	DrawFrameMax   *int64   `protobuf:"varint,4,opt,name=draw_frame_max,json=drawFrameMax" json:"draw_frame_max,omitempty"`
	DrawFrameMin   *int64   `protobuf:"varint,5,opt,name=draw_frame_min,json=drawFrameMin" json:"draw_frame_min,omitempty"`
	DrawFrameAvg   *float64 `protobuf:"fixed64,6,opt,name=draw_frame_avg,json=drawFrameAvg" json:"draw_frame_avg,omitempty"`
	// Number of GPU commands flushes and max/min/avg time per flush in nanoseconds.
	FlushCount *uint32  `protobuf:"varint,7,opt,name=flush_count,json=flushCount" json:"flush_count,omitempty"`
	FlushMax   *int64   `protobuf:"varint,8,opt,name=flush_max,json=flushMax" json:"flush_max,omitempty"`
	FlushMin   *int64   `protobuf:"varint,9,opt,name=flush_min,json=flushMin" json:"flush_min,omitempty"`
	FlushAvg   *float64 `protobuf:"fixed64,10,opt,name=flush_avg,json=flushAvg" json:"flush_avg,omitempty"`
	// Number of View tree preparation counts and max/min/avg time to traverse the tree in
	// nanoseconds.
	PrepareTreeCount *uint32  `protobuf:"varint,11,opt,name=prepare_tree_count,json=prepareTreeCount" json:"prepare_tree_count,omitempty"`
	PrepareTreeMax   *int64   `protobuf:"varint,12,opt,name=prepare_tree_max,json=prepareTreeMax" json:"prepare_tree_max,omitempty"`
	PrepareTreeMin   *int64   `protobuf:"varint,13,opt,name=prepare_tree_min,json=prepareTreeMin" json:"prepare_tree_min,omitempty"`
	PrepareTreeAvg   *float64 `protobuf:"fixed64,14,opt,name=prepare_tree_avg,json=prepareTreeAvg" json:"prepare_tree_avg,omitempty"`
	// Number of times the GPU rendered a frame and max/min/avg time for GPU to finish rendering in
	// in nanoseconds.
	GpuCompletionCount *uint32  `protobuf:"varint,15,opt,name=gpu_completion_count,json=gpuCompletionCount" json:"gpu_completion_count,omitempty"`
	GpuCompletionMax   *int64   `protobuf:"varint,16,opt,name=gpu_completion_max,json=gpuCompletionMax" json:"gpu_completion_max,omitempty"`
	GpuCompletionMin   *int64   `protobuf:"varint,17,opt,name=gpu_completion_min,json=gpuCompletionMin" json:"gpu_completion_min,omitempty"`
	GpuCompletionAvg   *float64 `protobuf:"fixed64,18,opt,name=gpu_completion_avg,json=gpuCompletionAvg" json:"gpu_completion_avg,omitempty"`
	// Number of times a frame was recorded/serialized in a display list on the UI thread with
	// max/min/avg time in nanoseconds.
	UiRecordCount *uint32  `protobuf:"varint,19,opt,name=ui_record_count,json=uiRecordCount" json:"ui_record_count,omitempty"`
	UiRecordMax   *int64   `protobuf:"varint,20,opt,name=ui_record_max,json=uiRecordMax" json:"ui_record_max,omitempty"`
	UiRecordMin   *int64   `protobuf:"varint,21,opt,name=ui_record_min,json=uiRecordMin" json:"ui_record_min,omitempty"`
	UiRecordAvg   *float64 `protobuf:"fixed64,22,opt,name=ui_record_avg,json=uiRecordAvg" json:"ui_record_avg,omitempty"`
	// number of unique shader programs that were used to render frames, followed by total and average
	// times to prepare a shader in nanoseconds.
	ShaderCompileCount *uint32  `protobuf:"varint,23,opt,name=shader_compile_count,json=shaderCompileCount" json:"shader_compile_count,omitempty"`
	ShaderCompileTime  *int64   `protobuf:"varint,24,opt,name=shader_compile_time,json=shaderCompileTime" json:"shader_compile_time,omitempty"`
	ShaderCompileAvg   *float64 `protobuf:"fixed64,25,opt,name=shader_compile_avg,json=shaderCompileAvg" json:"shader_compile_avg,omitempty"`
	// number of shader programs loaded from the disk cache, followed by total time and average time
	// to prepare a shader in nanoseconds.
	CacheHitCount *uint32  `protobuf:"varint,26,opt,name=cache_hit_count,json=cacheHitCount" json:"cache_hit_count,omitempty"`
	CacheHitTime  *int64   `protobuf:"varint,27,opt,name=cache_hit_time,json=cacheHitTime" json:"cache_hit_time,omitempty"`
	CacheHitAvg   *float64 `protobuf:"fixed64,28,opt,name=cache_hit_avg,json=cacheHitAvg" json:"cache_hit_avg,omitempty"`
	// number of shader programs compiled/linked, followed by total time and average time to prepare
	// a shader in nanoseconds.
	CacheMissCount *uint32  `protobuf:"varint,29,opt,name=cache_miss_count,json=cacheMissCount" json:"cache_miss_count,omitempty"`
	CacheMissTime  *int64   `protobuf:"varint,30,opt,name=cache_miss_time,json=cacheMissTime" json:"cache_miss_time,omitempty"`
	CacheMissAvg   *float64 `protobuf:"fixed64,31,opt,name=cache_miss_avg,json=cacheMissAvg" json:"cache_miss_avg,omitempty"`
	// max/min/avg CPU memory used for graphics by HWUI at the end of a frame.
	GraphicsCpuMemMax *int64   `protobuf:"varint,32,opt,name=graphics_cpu_mem_max,json=graphicsCpuMemMax" json:"graphics_cpu_mem_max,omitempty"`
	GraphicsCpuMemMin *int64   `protobuf:"varint,33,opt,name=graphics_cpu_mem_min,json=graphicsCpuMemMin" json:"graphics_cpu_mem_min,omitempty"`
	GraphicsCpuMemAvg *float64 `protobuf:"fixed64,34,opt,name=graphics_cpu_mem_avg,json=graphicsCpuMemAvg" json:"graphics_cpu_mem_avg,omitempty"`
	// max/min/avg GPU memory used by HWUI at the end of a frame excluding textures.
	GraphicsGpuMemMax *int64   `protobuf:"varint,35,opt,name=graphics_gpu_mem_max,json=graphicsGpuMemMax" json:"graphics_gpu_mem_max,omitempty"`
	GraphicsGpuMemMin *int64   `protobuf:"varint,36,opt,name=graphics_gpu_mem_min,json=graphicsGpuMemMin" json:"graphics_gpu_mem_min,omitempty"`
	GraphicsGpuMemAvg *float64 `protobuf:"fixed64,37,opt,name=graphics_gpu_mem_avg,json=graphicsGpuMemAvg" json:"graphics_gpu_mem_avg,omitempty"`
	// max/min/avg memory used for GPU textures by HWUI at the end of a frame.
	TextureMemMax *int64   `protobuf:"varint,38,opt,name=texture_mem_max,json=textureMemMax" json:"texture_mem_max,omitempty"`
	TextureMemMin *int64   `protobuf:"varint,39,opt,name=texture_mem_min,json=textureMemMin" json:"texture_mem_min,omitempty"`
	TextureMemAvg *float64 `protobuf:"fixed64,40,opt,name=texture_mem_avg,json=textureMemAvg" json:"texture_mem_avg,omitempty"`
	// max/min/avg memory used by HWUI at the end of a frame. This is a sum of previous 3 categories.
	AllMemMax *int64   `protobuf:"varint,41,opt,name=all_mem_max,json=allMemMax" json:"all_mem_max,omitempty"`
	AllMemMin *int64   `protobuf:"varint,42,opt,name=all_mem_min,json=allMemMin" json:"all_mem_min,omitempty"`
	AllMemAvg *float64 `protobuf:"fixed64,43,opt,name=all_mem_avg,json=allMemAvg" json:"all_mem_avg,omitempty"`
}

func (x *ProcessRenderInfo) Reset() {
	*x = ProcessRenderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessRenderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessRenderInfo) ProtoMessage() {}

func (x *ProcessRenderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessRenderInfo.ProtoReflect.Descriptor instead.
func (*ProcessRenderInfo) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{5}
}

func (x *ProcessRenderInfo) GetProcessName() string {
	if x != nil && x.ProcessName != nil {
		return *x.ProcessName
	}
	return ""
}

func (x *ProcessRenderInfo) GetRtCpuTimeMs() int64 {
	if x != nil && x.RtCpuTimeMs != nil {
		return *x.RtCpuTimeMs
	}
	return 0
}

func (x *ProcessRenderInfo) GetDrawFrameCount() uint32 {
	if x != nil && x.DrawFrameCount != nil {
		return *x.DrawFrameCount
	}
	return 0
}

func (x *ProcessRenderInfo) GetDrawFrameMax() int64 {
	if x != nil && x.DrawFrameMax != nil {
		return *x.DrawFrameMax
	}
	return 0
}

func (x *ProcessRenderInfo) GetDrawFrameMin() int64 {
	if x != nil && x.DrawFrameMin != nil {
		return *x.DrawFrameMin
	}
	return 0
}

func (x *ProcessRenderInfo) GetDrawFrameAvg() float64 {
	if x != nil && x.DrawFrameAvg != nil {
		return *x.DrawFrameAvg
	}
	return 0
}

func (x *ProcessRenderInfo) GetFlushCount() uint32 {
	if x != nil && x.FlushCount != nil {
		return *x.FlushCount
	}
	return 0
}

func (x *ProcessRenderInfo) GetFlushMax() int64 {
	if x != nil && x.FlushMax != nil {
		return *x.FlushMax
	}
	return 0
}

func (x *ProcessRenderInfo) GetFlushMin() int64 {
	if x != nil && x.FlushMin != nil {
		return *x.FlushMin
	}
	return 0
}

func (x *ProcessRenderInfo) GetFlushAvg() float64 {
	if x != nil && x.FlushAvg != nil {
		return *x.FlushAvg
	}
	return 0
}

func (x *ProcessRenderInfo) GetPrepareTreeCount() uint32 {
	if x != nil && x.PrepareTreeCount != nil {
		return *x.PrepareTreeCount
	}
	return 0
}

func (x *ProcessRenderInfo) GetPrepareTreeMax() int64 {
	if x != nil && x.PrepareTreeMax != nil {
		return *x.PrepareTreeMax
	}
	return 0
}

func (x *ProcessRenderInfo) GetPrepareTreeMin() int64 {
	if x != nil && x.PrepareTreeMin != nil {
		return *x.PrepareTreeMin
	}
	return 0
}

func (x *ProcessRenderInfo) GetPrepareTreeAvg() float64 {
	if x != nil && x.PrepareTreeAvg != nil {
		return *x.PrepareTreeAvg
	}
	return 0
}

func (x *ProcessRenderInfo) GetGpuCompletionCount() uint32 {
	if x != nil && x.GpuCompletionCount != nil {
		return *x.GpuCompletionCount
	}
	return 0
}

func (x *ProcessRenderInfo) GetGpuCompletionMax() int64 {
	if x != nil && x.GpuCompletionMax != nil {
		return *x.GpuCompletionMax
	}
	return 0
}

func (x *ProcessRenderInfo) GetGpuCompletionMin() int64 {
	if x != nil && x.GpuCompletionMin != nil {
		return *x.GpuCompletionMin
	}
	return 0
}

func (x *ProcessRenderInfo) GetGpuCompletionAvg() float64 {
	if x != nil && x.GpuCompletionAvg != nil {
		return *x.GpuCompletionAvg
	}
	return 0
}

func (x *ProcessRenderInfo) GetUiRecordCount() uint32 {
	if x != nil && x.UiRecordCount != nil {
		return *x.UiRecordCount
	}
	return 0
}

func (x *ProcessRenderInfo) GetUiRecordMax() int64 {
	if x != nil && x.UiRecordMax != nil {
		return *x.UiRecordMax
	}
	return 0
}

func (x *ProcessRenderInfo) GetUiRecordMin() int64 {
	if x != nil && x.UiRecordMin != nil {
		return *x.UiRecordMin
	}
	return 0
}

func (x *ProcessRenderInfo) GetUiRecordAvg() float64 {
	if x != nil && x.UiRecordAvg != nil {
		return *x.UiRecordAvg
	}
	return 0
}

func (x *ProcessRenderInfo) GetShaderCompileCount() uint32 {
	if x != nil && x.ShaderCompileCount != nil {
		return *x.ShaderCompileCount
	}
	return 0
}

func (x *ProcessRenderInfo) GetShaderCompileTime() int64 {
	if x != nil && x.ShaderCompileTime != nil {
		return *x.ShaderCompileTime
	}
	return 0
}

func (x *ProcessRenderInfo) GetShaderCompileAvg() float64 {
	if x != nil && x.ShaderCompileAvg != nil {
		return *x.ShaderCompileAvg
	}
	return 0
}

func (x *ProcessRenderInfo) GetCacheHitCount() uint32 {
	if x != nil && x.CacheHitCount != nil {
		return *x.CacheHitCount
	}
	return 0
}

func (x *ProcessRenderInfo) GetCacheHitTime() int64 {
	if x != nil && x.CacheHitTime != nil {
		return *x.CacheHitTime
	}
	return 0
}

func (x *ProcessRenderInfo) GetCacheHitAvg() float64 {
	if x != nil && x.CacheHitAvg != nil {
		return *x.CacheHitAvg
	}
	return 0
}

func (x *ProcessRenderInfo) GetCacheMissCount() uint32 {
	if x != nil && x.CacheMissCount != nil {
		return *x.CacheMissCount
	}
	return 0
}

func (x *ProcessRenderInfo) GetCacheMissTime() int64 {
	if x != nil && x.CacheMissTime != nil {
		return *x.CacheMissTime
	}
	return 0
}

func (x *ProcessRenderInfo) GetCacheMissAvg() float64 {
	if x != nil && x.CacheMissAvg != nil {
		return *x.CacheMissAvg
	}
	return 0
}

func (x *ProcessRenderInfo) GetGraphicsCpuMemMax() int64 {
	if x != nil && x.GraphicsCpuMemMax != nil {
		return *x.GraphicsCpuMemMax
	}
	return 0
}

func (x *ProcessRenderInfo) GetGraphicsCpuMemMin() int64 {
	if x != nil && x.GraphicsCpuMemMin != nil {
		return *x.GraphicsCpuMemMin
	}
	return 0
}

func (x *ProcessRenderInfo) GetGraphicsCpuMemAvg() float64 {
	if x != nil && x.GraphicsCpuMemAvg != nil {
		return *x.GraphicsCpuMemAvg
	}
	return 0
}

func (x *ProcessRenderInfo) GetGraphicsGpuMemMax() int64 {
	if x != nil && x.GraphicsGpuMemMax != nil {
		return *x.GraphicsGpuMemMax
	}
	return 0
}

func (x *ProcessRenderInfo) GetGraphicsGpuMemMin() int64 {
	if x != nil && x.GraphicsGpuMemMin != nil {
		return *x.GraphicsGpuMemMin
	}
	return 0
}

func (x *ProcessRenderInfo) GetGraphicsGpuMemAvg() float64 {
	if x != nil && x.GraphicsGpuMemAvg != nil {
		return *x.GraphicsGpuMemAvg
	}
	return 0
}

func (x *ProcessRenderInfo) GetTextureMemMax() int64 {
	if x != nil && x.TextureMemMax != nil {
		return *x.TextureMemMax
	}
	return 0
}

func (x *ProcessRenderInfo) GetTextureMemMin() int64 {
	if x != nil && x.TextureMemMin != nil {
		return *x.TextureMemMin
	}
	return 0
}

func (x *ProcessRenderInfo) GetTextureMemAvg() float64 {
	if x != nil && x.TextureMemAvg != nil {
		return *x.TextureMemAvg
	}
	return 0
}

func (x *ProcessRenderInfo) GetAllMemMax() int64 {
	if x != nil && x.AllMemMax != nil {
		return *x.AllMemMax
	}
	return 0
}

func (x *ProcessRenderInfo) GetAllMemMin() int64 {
	if x != nil && x.AllMemMin != nil {
		return *x.AllMemMin
	}
	return 0
}

func (x *ProcessRenderInfo) GetAllMemAvg() float64 {
	if x != nil && x.AllMemAvg != nil {
		return *x.AllMemAvg
	}
	return 0
}

type AndroidHwuiMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  HWUI metrics for processes that have a RenderThread.
	ProcessInfo []*ProcessRenderInfo `protobuf:"bytes,1,rep,name=process_info,json=processInfo" json:"process_info,omitempty"`
}

func (x *AndroidHwuiMetric) Reset() {
	*x = AndroidHwuiMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidHwuiMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidHwuiMetric) ProtoMessage() {}

func (x *AndroidHwuiMetric) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidHwuiMetric.ProtoReflect.Descriptor instead.
func (*AndroidHwuiMetric) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{6}
}

func (x *AndroidHwuiMetric) GetProcessInfo() []*ProcessRenderInfo {
	if x != nil {
		return x.ProcessInfo
	}
	return nil
}

// ion memory stats on Android.
type AndroidIonMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buffer []*AndroidIonMetric_Buffer `protobuf:"bytes,1,rep,name=buffer" json:"buffer,omitempty"`
}

func (x *AndroidIonMetric) Reset() {
	*x = AndroidIonMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidIonMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidIonMetric) ProtoMessage() {}

func (x *AndroidIonMetric) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidIonMetric.ProtoReflect.Descriptor instead.
func (*AndroidIonMetric) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{7}
}

func (x *AndroidIonMetric) GetBuffer() []*AndroidIonMetric_Buffer {
	if x != nil {
		return x.Buffer
	}
	return nil
}

type JavaHeapHistogram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceStats []*JavaHeapHistogram_InstanceStats `protobuf:"bytes,1,rep,name=instance_stats,json=instanceStats" json:"instance_stats,omitempty"`
}

func (x *JavaHeapHistogram) Reset() {
	*x = JavaHeapHistogram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JavaHeapHistogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaHeapHistogram) ProtoMessage() {}

func (x *JavaHeapHistogram) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaHeapHistogram.ProtoReflect.Descriptor instead.
func (*JavaHeapHistogram) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{8}
}

func (x *JavaHeapHistogram) GetInstanceStats() []*JavaHeapHistogram_InstanceStats {
	if x != nil {
		return x.InstanceStats
	}
	return nil
}

type JavaHeapStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceStats []*JavaHeapStats_InstanceStats `protobuf:"bytes,1,rep,name=instance_stats,json=instanceStats" json:"instance_stats,omitempty"`
}

func (x *JavaHeapStats) Reset() {
	*x = JavaHeapStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JavaHeapStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaHeapStats) ProtoMessage() {}

func (x *JavaHeapStats) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaHeapStats.ProtoReflect.Descriptor instead.
func (*JavaHeapStats) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{9}
}

func (x *JavaHeapStats) GetInstanceStats() []*JavaHeapStats_InstanceStats {
	if x != nil {
		return x.InstanceStats
	}
	return nil
}

// LMK stats on Android.
type AndroidLmkMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total count of LMK events observed in the trace.
	TotalCount *int32                         `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	ByOomScore []*AndroidLmkMetric_ByOomScore `protobuf:"bytes,2,rep,name=by_oom_score,json=byOomScore" json:"by_oom_score,omitempty"`
	// OOM reaper kills. Enabled via the oom/mark_victim point. Should never
	// happen.
	OomVictimCount *int32 `protobuf:"varint,3,opt,name=oom_victim_count,json=oomVictimCount" json:"oom_victim_count,omitempty"`
}

func (x *AndroidLmkMetric) Reset() {
	*x = AndroidLmkMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidLmkMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidLmkMetric) ProtoMessage() {}

func (x *AndroidLmkMetric) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidLmkMetric.ProtoReflect.Descriptor instead.
func (*AndroidLmkMetric) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{10}
}

func (x *AndroidLmkMetric) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *AndroidLmkMetric) GetByOomScore() []*AndroidLmkMetric_ByOomScore {
	if x != nil {
		return x.ByOomScore
	}
	return nil
}

func (x *AndroidLmkMetric) GetOomVictimCount() int32 {
	if x != nil && x.OomVictimCount != nil {
		return *x.OomVictimCount
	}
	return 0
}

// Global process state at LMK time, used to identify potential culprits.
// TODO: rename to AndroidLmkProcessState
type AndroidLmkReasonMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LMKs present in the trace, ordered on their timestamp.
	Lmks []*AndroidLmkReasonMetric_Lmk `protobuf:"bytes,1,rep,name=lmks" json:"lmks,omitempty"`
}

func (x *AndroidLmkReasonMetric) Reset() {
	*x = AndroidLmkReasonMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidLmkReasonMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidLmkReasonMetric) ProtoMessage() {}

func (x *AndroidLmkReasonMetric) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidLmkReasonMetric.ProtoReflect.Descriptor instead.
func (*AndroidLmkReasonMetric) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{11}
}

func (x *AndroidLmkReasonMetric) GetLmks() []*AndroidLmkReasonMetric_Lmk {
	if x != nil {
		return x.Lmks
	}
	return nil
}

// Memory metrics on Android.
type AndroidMemoryMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Process metrics, grouped by process name
	ProcessMetrics []*AndroidMemoryMetric_ProcessMetrics `protobuf:"bytes,1,rep,name=process_metrics,json=processMetrics" json:"process_metrics,omitempty"`
}

func (x *AndroidMemoryMetric) Reset() {
	*x = AndroidMemoryMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidMemoryMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidMemoryMetric) ProtoMessage() {}

func (x *AndroidMemoryMetric) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidMemoryMetric.ProtoReflect.Descriptor instead.
func (*AndroidMemoryMetric) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{12}
}

func (x *AndroidMemoryMetric) GetProcessMetrics() []*AndroidMemoryMetric_ProcessMetrics {
	if x != nil {
		return x.ProcessMetrics
	}
	return nil
}

// Unaggregated memory metrics on Android.
type AndroidMemoryUnaggregatedMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Process metrics for every process instance in trace.
	ProcessValues []*AndroidMemoryUnaggregatedMetric_ProcessValues `protobuf:"bytes,1,rep,name=process_values,json=processValues" json:"process_values,omitempty"`
}

func (x *AndroidMemoryUnaggregatedMetric) Reset() {
	*x = AndroidMemoryUnaggregatedMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidMemoryUnaggregatedMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidMemoryUnaggregatedMetric) ProtoMessage() {}

func (x *AndroidMemoryUnaggregatedMetric) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidMemoryUnaggregatedMetric.ProtoReflect.Descriptor instead.
func (*AndroidMemoryUnaggregatedMetric) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{13}
}

func (x *AndroidMemoryUnaggregatedMetric) GetProcessValues() []*AndroidMemoryUnaggregatedMetric_ProcessValues {
	if x != nil {
		return x.ProcessValues
	}
	return nil
}

type AndroidPackageList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packages []*AndroidPackageList_Package `protobuf:"bytes,1,rep,name=packages" json:"packages,omitempty"`
}

func (x *AndroidPackageList) Reset() {
	*x = AndroidPackageList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidPackageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidPackageList) ProtoMessage() {}

func (x *AndroidPackageList) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidPackageList.ProtoReflect.Descriptor instead.
func (*AndroidPackageList) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{14}
}

func (x *AndroidPackageList) GetPackages() []*AndroidPackageList_Package {
	if x != nil {
		return x.Packages
	}
	return nil
}

type AndroidPowerRails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Energy data per Power Rail.
	PowerRails []*AndroidPowerRails_PowerRails `protobuf:"bytes,1,rep,name=power_rails,json=powerRails" json:"power_rails,omitempty"`
}

func (x *AndroidPowerRails) Reset() {
	*x = AndroidPowerRails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidPowerRails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidPowerRails) ProtoMessage() {}

func (x *AndroidPowerRails) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidPowerRails.ProtoReflect.Descriptor instead.
func (*AndroidPowerRails) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{15}
}

func (x *AndroidPowerRails) GetPowerRails() []*AndroidPowerRails_PowerRails {
	if x != nil {
		return x.PowerRails
	}
	return nil
}

// Android app startup metrics.
type AndroidStartupMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Startup []*AndroidStartupMetric_Startup `protobuf:"bytes,1,rep,name=startup" json:"startup,omitempty"`
}

func (x *AndroidStartupMetric) Reset() {
	*x = AndroidStartupMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidStartupMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidStartupMetric) ProtoMessage() {}

func (x *AndroidStartupMetric) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidStartupMetric.ProtoReflect.Descriptor instead.
func (*AndroidStartupMetric) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{16}
}

func (x *AndroidStartupMetric) GetStartup() []*AndroidStartupMetric_Startup {
	if x != nil {
		return x.Startup
	}
	return nil
}

type AndroidSurfaceflingerMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Counts the number of missed frames in the trace.
	MissedFrames *uint32 `protobuf:"varint,1,opt,name=missed_frames,json=missedFrames" json:"missed_frames,omitempty"`
	// Counts the number of missed HWC frames in the trace.
	MissedHwcFrames *uint32 `protobuf:"varint,2,opt,name=missed_hwc_frames,json=missedHwcFrames" json:"missed_hwc_frames,omitempty"`
	// Counts the number of missed GPU frames in the trace.
	MissedGpuFrames *uint32 `protobuf:"varint,3,opt,name=missed_gpu_frames,json=missedGpuFrames" json:"missed_gpu_frames,omitempty"`
}

func (x *AndroidSurfaceflingerMetric) Reset() {
	*x = AndroidSurfaceflingerMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidSurfaceflingerMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidSurfaceflingerMetric) ProtoMessage() {}

func (x *AndroidSurfaceflingerMetric) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidSurfaceflingerMetric.ProtoReflect.Descriptor instead.
func (*AndroidSurfaceflingerMetric) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{17}
}

func (x *AndroidSurfaceflingerMetric) GetMissedFrames() uint32 {
	if x != nil && x.MissedFrames != nil {
		return *x.MissedFrames
	}
	return 0
}

func (x *AndroidSurfaceflingerMetric) GetMissedHwcFrames() uint32 {
	if x != nil && x.MissedHwcFrames != nil {
		return *x.MissedHwcFrames
	}
	return 0
}

func (x *AndroidSurfaceflingerMetric) GetMissedGpuFrames() uint32 {
	if x != nil && x.MissedGpuFrames != nil {
		return *x.MissedGpuFrames
	}
	return 0
}

type AndroidTaskNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Process []*AndroidTaskNames_Process `protobuf:"bytes,1,rep,name=process" json:"process,omitempty"`
}

func (x *AndroidTaskNames) Reset() {
	*x = AndroidTaskNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidTaskNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidTaskNames) ProtoMessage() {}

func (x *AndroidTaskNames) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidTaskNames.ProtoReflect.Descriptor instead.
func (*AndroidTaskNames) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{18}
}

func (x *AndroidTaskNames) GetProcess() []*AndroidTaskNames_Process {
	if x != nil {
		return x.Process
	}
	return nil
}

type AndroidThreadTimeInStateMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processes []*AndroidThreadTimeInStateMetric_Process `protobuf:"bytes,1,rep,name=processes" json:"processes,omitempty"`
}

func (x *AndroidThreadTimeInStateMetric) Reset() {
	*x = AndroidThreadTimeInStateMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidThreadTimeInStateMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidThreadTimeInStateMetric) ProtoMessage() {}

func (x *AndroidThreadTimeInStateMetric) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidThreadTimeInStateMetric.ProtoReflect.Descriptor instead.
func (*AndroidThreadTimeInStateMetric) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{19}
}

func (x *AndroidThreadTimeInStateMetric) GetProcesses() []*AndroidThreadTimeInStateMetric_Process {
	if x != nil {
		return x.Processes
	}
	return nil
}

type UnmappedJavaSymbols struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessSymbols []*UnmappedJavaSymbols_ProcessSymbols `protobuf:"bytes,1,rep,name=process_symbols,json=processSymbols" json:"process_symbols,omitempty"`
}

func (x *UnmappedJavaSymbols) Reset() {
	*x = UnmappedJavaSymbols{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmappedJavaSymbols) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmappedJavaSymbols) ProtoMessage() {}

func (x *UnmappedJavaSymbols) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmappedJavaSymbols.ProtoReflect.Descriptor instead.
func (*UnmappedJavaSymbols) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{20}
}

func (x *UnmappedJavaSymbols) GetProcessSymbols() []*UnmappedJavaSymbols_ProcessSymbols {
	if x != nil {
		return x.ProcessSymbols
	}
	return nil
}

type UnsymbolizedFrames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frames []*UnsymbolizedFrames_Frame `protobuf:"bytes,1,rep,name=frames" json:"frames,omitempty"`
}

func (x *UnsymbolizedFrames) Reset() {
	*x = UnsymbolizedFrames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsymbolizedFrames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsymbolizedFrames) ProtoMessage() {}

func (x *UnsymbolizedFrames) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsymbolizedFrames.ProtoReflect.Descriptor instead.
func (*UnsymbolizedFrames) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{21}
}

func (x *UnsymbolizedFrames) GetFrames() []*UnsymbolizedFrames_Frame {
	if x != nil {
		return x.Frames
	}
	return nil
}

// Trace processor metadata
type TraceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorStatsEntry                []*TraceMetadata_Entry `protobuf:"bytes,1,rep,name=error_stats_entry,json=errorStatsEntry" json:"error_stats_entry,omitempty"`
	TraceDurationNs                *int64                 `protobuf:"varint,2,opt,name=trace_duration_ns,json=traceDurationNs" json:"trace_duration_ns,omitempty"`
	TraceUuid                      *string                `protobuf:"bytes,3,opt,name=trace_uuid,json=traceUuid" json:"trace_uuid,omitempty"`
	AndroidBuildFingerprint        *string                `protobuf:"bytes,4,opt,name=android_build_fingerprint,json=androidBuildFingerprint" json:"android_build_fingerprint,omitempty"`
	StatsdTriggeringSubscriptionId *int64                 `protobuf:"varint,5,opt,name=statsd_triggering_subscription_id,json=statsdTriggeringSubscriptionId" json:"statsd_triggering_subscription_id,omitempty"`
	TraceSizeBytes                 *int64                 `protobuf:"varint,6,opt,name=trace_size_bytes,json=traceSizeBytes" json:"trace_size_bytes,omitempty"`
	TraceTrigger                   []string               `protobuf:"bytes,7,rep,name=trace_trigger,json=traceTrigger" json:"trace_trigger,omitempty"`
	UniqueSessionName              *string                `protobuf:"bytes,8,opt,name=unique_session_name,json=uniqueSessionName" json:"unique_session_name,omitempty"`
}

func (x *TraceMetadata) Reset() {
	*x = TraceMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceMetadata) ProtoMessage() {}

func (x *TraceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceMetadata.ProtoReflect.Descriptor instead.
func (*TraceMetadata) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{22}
}

func (x *TraceMetadata) GetErrorStatsEntry() []*TraceMetadata_Entry {
	if x != nil {
		return x.ErrorStatsEntry
	}
	return nil
}

func (x *TraceMetadata) GetTraceDurationNs() int64 {
	if x != nil && x.TraceDurationNs != nil {
		return *x.TraceDurationNs
	}
	return 0
}

func (x *TraceMetadata) GetTraceUuid() string {
	if x != nil && x.TraceUuid != nil {
		return *x.TraceUuid
	}
	return ""
}

func (x *TraceMetadata) GetAndroidBuildFingerprint() string {
	if x != nil && x.AndroidBuildFingerprint != nil {
		return *x.AndroidBuildFingerprint
	}
	return ""
}

func (x *TraceMetadata) GetStatsdTriggeringSubscriptionId() int64 {
	if x != nil && x.StatsdTriggeringSubscriptionId != nil {
		return *x.StatsdTriggeringSubscriptionId
	}
	return 0
}

func (x *TraceMetadata) GetTraceSizeBytes() int64 {
	if x != nil && x.TraceSizeBytes != nil {
		return *x.TraceSizeBytes
	}
	return 0
}

func (x *TraceMetadata) GetTraceTrigger() []string {
	if x != nil {
		return x.TraceTrigger
	}
	return nil
}

func (x *TraceMetadata) GetUniqueSessionName() string {
	if x != nil && x.UniqueSessionName != nil {
		return *x.UniqueSessionName
	}
	return ""
}

// Root message for all Perfetto-based metrics.
//
// Next id: 26
type TraceMetrics struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Battery counters metric on Android.
	AndroidBatt *AndroidBatteryMetric `protobuf:"bytes,5,opt,name=android_batt,json=androidBatt" json:"android_batt,omitempty"`
	// CPU usage per trace, process and thread.
	AndroidCpu *AndroidCpuMetric `protobuf:"bytes,6,opt,name=android_cpu,json=androidCpu" json:"android_cpu,omitempty"`
	// Memory metrics on Android (owned by the Android Telemetry team).
	AndroidMem *AndroidMemoryMetric `protobuf:"bytes,1,opt,name=android_mem,json=androidMem" json:"android_mem,omitempty"`
	// Memory metrics on Android in unaggregated form. (owned by the Android
	// Telemetry team).
	// Note: this generates a lot of data so should not be requested unless it
	// is clear that this data is necessary.
	AndroidMemUnagg *AndroidMemoryUnaggregatedMetric `protobuf:"bytes,11,opt,name=android_mem_unagg,json=androidMemUnagg" json:"android_mem_unagg,omitempty"`
	// Package list.
	AndroidPackageList *AndroidPackageList `protobuf:"bytes,12,opt,name=android_package_list,json=androidPackageList" json:"android_package_list,omitempty"`
	// ion buffer memory metrics.
	AndroidIon *AndroidIonMetric `protobuf:"bytes,9,opt,name=android_ion,json=androidIon" json:"android_ion,omitempty"`
	// Statistics about low memory kills.
	AndroidLmk *AndroidLmkMetric `protobuf:"bytes,8,opt,name=android_lmk,json=androidLmk" json:"android_lmk,omitempty"`
	// Power Rails metrics on Android.
	AndroidPowrails *AndroidPowerRails `protobuf:"bytes,7,opt,name=android_powrails,json=androidPowrails" json:"android_powrails,omitempty"`
	// Startup metrics on Android (owned by the Android Telemetry team).
	AndroidStartup *AndroidStartupMetric `protobuf:"bytes,2,opt,name=android_startup,json=androidStartup" json:"android_startup,omitempty"`
	// Heap profiler callsite statistics.
	HeapProfileCallsites *HeapProfileCallsites `protobuf:"bytes,16,opt,name=heap_profile_callsites,json=heapProfileCallsites" json:"heap_profile_callsites,omitempty"`
	// Trace metadata (applicable to all traces).
	TraceMetadata *TraceMetadata `protobuf:"bytes,3,opt,name=trace_metadata,json=traceMetadata" json:"trace_metadata,omitempty"`
	// Returns stack frames missing symbols.
	UnsymbolizedFrames *UnsymbolizedFrames `protobuf:"bytes,15,opt,name=unsymbolized_frames,json=unsymbolizedFrames" json:"unsymbolized_frames,omitempty"`
	// If the trace contains a heap graph, output allocation statistics.
	JavaHeapStats *JavaHeapStats `protobuf:"bytes,17,opt,name=java_heap_stats,json=javaHeapStats" json:"java_heap_stats,omitempty"`
	// If the trace contains a heap graph, output histogram.
	JavaHeapHistogram *JavaHeapHistogram `protobuf:"bytes,21,opt,name=java_heap_histogram,json=javaHeapHistogram" json:"java_heap_histogram,omitempty"`
	// Metrics used to find potential culprits of low-memory kills.
	AndroidLmkReason *AndroidLmkReasonMetric `protobuf:"bytes,18,opt,name=android_lmk_reason,json=androidLmkReason" json:"android_lmk_reason,omitempty"`
	// Java type names that have no deobfuscation mappings.
	UnmappedJavaSymbols      *UnmappedJavaSymbols            `protobuf:"bytes,19,opt,name=unmapped_java_symbols,json=unmappedJavaSymbols" json:"unmapped_java_symbols,omitempty"`
	AndroidHwuiMetric        *AndroidHwuiMetric              `protobuf:"bytes,20,opt,name=android_hwui_metric,json=androidHwuiMetric" json:"android_hwui_metric,omitempty"`
	DisplayMetrics           *AndroidDisplayMetrics          `protobuf:"bytes,22,opt,name=display_metrics,json=displayMetrics" json:"display_metrics,omitempty"`
	AndroidTaskNames         *AndroidTaskNames               `protobuf:"bytes,23,opt,name=android_task_names,json=androidTaskNames" json:"android_task_names,omitempty"`
	AndroidThreadTimeInState *AndroidThreadTimeInStateMetric `protobuf:"bytes,24,opt,name=android_thread_time_in_state,json=androidThreadTimeInState" json:"android_thread_time_in_state,omitempty"`
	// Metric associated with surfaceflinger.
	AndroidSurfaceflinger *AndroidSurfaceflingerMetric `protobuf:"bytes,25,opt,name=android_surfaceflinger,json=androidSurfaceflinger" json:"android_surfaceflinger,omitempty"`
}

func (x *TraceMetrics) Reset() {
	*x = TraceMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceMetrics) ProtoMessage() {}

func (x *TraceMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceMetrics.ProtoReflect.Descriptor instead.
func (*TraceMetrics) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{23}
}

var extRange_TraceMetrics = []protoiface.ExtensionRangeV1{
	{Start: 450, End: 499},
	{Start: 500, End: 1000},
}

// Deprecated: Use TraceMetrics.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*TraceMetrics) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_TraceMetrics
}

func (x *TraceMetrics) GetAndroidBatt() *AndroidBatteryMetric {
	if x != nil {
		return x.AndroidBatt
	}
	return nil
}

func (x *TraceMetrics) GetAndroidCpu() *AndroidCpuMetric {
	if x != nil {
		return x.AndroidCpu
	}
	return nil
}

func (x *TraceMetrics) GetAndroidMem() *AndroidMemoryMetric {
	if x != nil {
		return x.AndroidMem
	}
	return nil
}

func (x *TraceMetrics) GetAndroidMemUnagg() *AndroidMemoryUnaggregatedMetric {
	if x != nil {
		return x.AndroidMemUnagg
	}
	return nil
}

func (x *TraceMetrics) GetAndroidPackageList() *AndroidPackageList {
	if x != nil {
		return x.AndroidPackageList
	}
	return nil
}

func (x *TraceMetrics) GetAndroidIon() *AndroidIonMetric {
	if x != nil {
		return x.AndroidIon
	}
	return nil
}

func (x *TraceMetrics) GetAndroidLmk() *AndroidLmkMetric {
	if x != nil {
		return x.AndroidLmk
	}
	return nil
}

func (x *TraceMetrics) GetAndroidPowrails() *AndroidPowerRails {
	if x != nil {
		return x.AndroidPowrails
	}
	return nil
}

func (x *TraceMetrics) GetAndroidStartup() *AndroidStartupMetric {
	if x != nil {
		return x.AndroidStartup
	}
	return nil
}

func (x *TraceMetrics) GetHeapProfileCallsites() *HeapProfileCallsites {
	if x != nil {
		return x.HeapProfileCallsites
	}
	return nil
}

func (x *TraceMetrics) GetTraceMetadata() *TraceMetadata {
	if x != nil {
		return x.TraceMetadata
	}
	return nil
}

func (x *TraceMetrics) GetUnsymbolizedFrames() *UnsymbolizedFrames {
	if x != nil {
		return x.UnsymbolizedFrames
	}
	return nil
}

func (x *TraceMetrics) GetJavaHeapStats() *JavaHeapStats {
	if x != nil {
		return x.JavaHeapStats
	}
	return nil
}

func (x *TraceMetrics) GetJavaHeapHistogram() *JavaHeapHistogram {
	if x != nil {
		return x.JavaHeapHistogram
	}
	return nil
}

func (x *TraceMetrics) GetAndroidLmkReason() *AndroidLmkReasonMetric {
	if x != nil {
		return x.AndroidLmkReason
	}
	return nil
}

func (x *TraceMetrics) GetUnmappedJavaSymbols() *UnmappedJavaSymbols {
	if x != nil {
		return x.UnmappedJavaSymbols
	}
	return nil
}

func (x *TraceMetrics) GetAndroidHwuiMetric() *AndroidHwuiMetric {
	if x != nil {
		return x.AndroidHwuiMetric
	}
	return nil
}

func (x *TraceMetrics) GetDisplayMetrics() *AndroidDisplayMetrics {
	if x != nil {
		return x.DisplayMetrics
	}
	return nil
}

func (x *TraceMetrics) GetAndroidTaskNames() *AndroidTaskNames {
	if x != nil {
		return x.AndroidTaskNames
	}
	return nil
}

func (x *TraceMetrics) GetAndroidThreadTimeInState() *AndroidThreadTimeInStateMetric {
	if x != nil {
		return x.AndroidThreadTimeInState
	}
	return nil
}

func (x *TraceMetrics) GetAndroidSurfaceflinger() *AndroidSurfaceflingerMetric {
	if x != nil {
		return x.AndroidSurfaceflinger
	}
	return nil
}

type AndroidBatteryMetric_BatteryCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp measured from boot time [ns].
	TimestampNs *int64 `protobuf:"varint,1,opt,name=timestamp_ns,json=timestampNs" json:"timestamp_ns,omitempty"`
	// Fields 2-5 are the same as in BatteryCounters proto in TracePacket.
	ChargeCounterUah *float64 `protobuf:"fixed64,2,opt,name=charge_counter_uah,json=chargeCounterUah" json:"charge_counter_uah,omitempty"`
	CapacityPercent  *float32 `protobuf:"fixed32,3,opt,name=capacity_percent,json=capacityPercent" json:"capacity_percent,omitempty"`
	CurrentUa        *float64 `protobuf:"fixed64,4,opt,name=current_ua,json=currentUa" json:"current_ua,omitempty"`
	CurrentAvgUa     *float64 `protobuf:"fixed64,5,opt,name=current_avg_ua,json=currentAvgUa" json:"current_avg_ua,omitempty"`
}

func (x *AndroidBatteryMetric_BatteryCounters) Reset() {
	*x = AndroidBatteryMetric_BatteryCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidBatteryMetric_BatteryCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidBatteryMetric_BatteryCounters) ProtoMessage() {}

func (x *AndroidBatteryMetric_BatteryCounters) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidBatteryMetric_BatteryCounters.ProtoReflect.Descriptor instead.
func (*AndroidBatteryMetric_BatteryCounters) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AndroidBatteryMetric_BatteryCounters) GetTimestampNs() int64 {
	if x != nil && x.TimestampNs != nil {
		return *x.TimestampNs
	}
	return 0
}

func (x *AndroidBatteryMetric_BatteryCounters) GetChargeCounterUah() float64 {
	if x != nil && x.ChargeCounterUah != nil {
		return *x.ChargeCounterUah
	}
	return 0
}

func (x *AndroidBatteryMetric_BatteryCounters) GetCapacityPercent() float32 {
	if x != nil && x.CapacityPercent != nil {
		return *x.CapacityPercent
	}
	return 0
}

func (x *AndroidBatteryMetric_BatteryCounters) GetCurrentUa() float64 {
	if x != nil && x.CurrentUa != nil {
		return *x.CurrentUa
	}
	return 0
}

func (x *AndroidBatteryMetric_BatteryCounters) GetCurrentAvgUa() float64 {
	if x != nil && x.CurrentAvgUa != nil {
		return *x.CurrentAvgUa
	}
	return 0
}

type AndroidBatteryMetric_BatteryAggregates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Field numbers for these 3 == the int values from Android
	TotalScreenOffNs  *int64 `protobuf:"varint,1,opt,name=total_screen_off_ns,json=totalScreenOffNs" json:"total_screen_off_ns,omitempty"`
	TotalScreenOnNs   *int64 `protobuf:"varint,2,opt,name=total_screen_on_ns,json=totalScreenOnNs" json:"total_screen_on_ns,omitempty"`
	TotalScreenDozeNs *int64 `protobuf:"varint,3,opt,name=total_screen_doze_ns,json=totalScreenDozeNs" json:"total_screen_doze_ns,omitempty"`
	// Total time a wakelock was held
	TotalWakelockNs *int64 `protobuf:"varint,4,opt,name=total_wakelock_ns,json=totalWakelockNs" json:"total_wakelock_ns,omitempty"`
}

func (x *AndroidBatteryMetric_BatteryAggregates) Reset() {
	*x = AndroidBatteryMetric_BatteryAggregates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidBatteryMetric_BatteryAggregates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidBatteryMetric_BatteryAggregates) ProtoMessage() {}

func (x *AndroidBatteryMetric_BatteryAggregates) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidBatteryMetric_BatteryAggregates.ProtoReflect.Descriptor instead.
func (*AndroidBatteryMetric_BatteryAggregates) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{0, 1}
}

func (x *AndroidBatteryMetric_BatteryAggregates) GetTotalScreenOffNs() int64 {
	if x != nil && x.TotalScreenOffNs != nil {
		return *x.TotalScreenOffNs
	}
	return 0
}

func (x *AndroidBatteryMetric_BatteryAggregates) GetTotalScreenOnNs() int64 {
	if x != nil && x.TotalScreenOnNs != nil {
		return *x.TotalScreenOnNs
	}
	return 0
}

func (x *AndroidBatteryMetric_BatteryAggregates) GetTotalScreenDozeNs() int64 {
	if x != nil && x.TotalScreenDozeNs != nil {
		return *x.TotalScreenDozeNs
	}
	return 0
}

func (x *AndroidBatteryMetric_BatteryAggregates) GetTotalWakelockNs() int64 {
	if x != nil && x.TotalWakelockNs != nil {
		return *x.TotalWakelockNs
	}
	return 0
}

// Next id: 6
type AndroidCpuMetric_Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CPU megacycles (i.e. cycles divided by 1e6).
	Mcycles *int64 `protobuf:"varint,1,opt,name=mcycles" json:"mcycles,omitempty"`
	// Total time the thread was running for this breakdown in
	// nanoseconds.
	RuntimeNs *int64 `protobuf:"varint,2,opt,name=runtime_ns,json=runtimeNs" json:"runtime_ns,omitempty"`
	// Min/max/average CPU frequency weighted by the time the CPU was
	// running at each frequency in this breakdown.
	MinFreqKhz *int64 `protobuf:"varint,3,opt,name=min_freq_khz,json=minFreqKhz" json:"min_freq_khz,omitempty"`
	MaxFreqKhz *int64 `protobuf:"varint,4,opt,name=max_freq_khz,json=maxFreqKhz" json:"max_freq_khz,omitempty"`
	AvgFreqKhz *int64 `protobuf:"varint,5,opt,name=avg_freq_khz,json=avgFreqKhz" json:"avg_freq_khz,omitempty"`
}

func (x *AndroidCpuMetric_Metrics) Reset() {
	*x = AndroidCpuMetric_Metrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidCpuMetric_Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidCpuMetric_Metrics) ProtoMessage() {}

func (x *AndroidCpuMetric_Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidCpuMetric_Metrics.ProtoReflect.Descriptor instead.
func (*AndroidCpuMetric_Metrics) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{1, 0}
}

func (x *AndroidCpuMetric_Metrics) GetMcycles() int64 {
	if x != nil && x.Mcycles != nil {
		return *x.Mcycles
	}
	return 0
}

func (x *AndroidCpuMetric_Metrics) GetRuntimeNs() int64 {
	if x != nil && x.RuntimeNs != nil {
		return *x.RuntimeNs
	}
	return 0
}

func (x *AndroidCpuMetric_Metrics) GetMinFreqKhz() int64 {
	if x != nil && x.MinFreqKhz != nil {
		return *x.MinFreqKhz
	}
	return 0
}

func (x *AndroidCpuMetric_Metrics) GetMaxFreqKhz() int64 {
	if x != nil && x.MaxFreqKhz != nil {
		return *x.MaxFreqKhz
	}
	return 0
}

func (x *AndroidCpuMetric_Metrics) GetAvgFreqKhz() int64 {
	if x != nil && x.AvgFreqKhz != nil {
		return *x.AvgFreqKhz
	}
	return 0
}

// Next id: 7
type AndroidCpuMetric_CoreData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *uint32                   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Metrics *AndroidCpuMetric_Metrics `protobuf:"bytes,6,opt,name=metrics" json:"metrics,omitempty"`
}

func (x *AndroidCpuMetric_CoreData) Reset() {
	*x = AndroidCpuMetric_CoreData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidCpuMetric_CoreData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidCpuMetric_CoreData) ProtoMessage() {}

func (x *AndroidCpuMetric_CoreData) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidCpuMetric_CoreData.ProtoReflect.Descriptor instead.
func (*AndroidCpuMetric_CoreData) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{1, 1}
}

func (x *AndroidCpuMetric_CoreData) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *AndroidCpuMetric_CoreData) GetMetrics() *AndroidCpuMetric_Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// Next id: 3
type AndroidCpuMetric_CoreTypeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *string                   `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Metrics *AndroidCpuMetric_Metrics `protobuf:"bytes,2,opt,name=metrics" json:"metrics,omitempty"`
}

func (x *AndroidCpuMetric_CoreTypeData) Reset() {
	*x = AndroidCpuMetric_CoreTypeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidCpuMetric_CoreTypeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidCpuMetric_CoreTypeData) ProtoMessage() {}

func (x *AndroidCpuMetric_CoreTypeData) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidCpuMetric_CoreTypeData.ProtoReflect.Descriptor instead.
func (*AndroidCpuMetric_CoreTypeData) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{1, 2}
}

func (x *AndroidCpuMetric_CoreTypeData) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *AndroidCpuMetric_CoreTypeData) GetMetrics() *AndroidCpuMetric_Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// Next id: 7
type AndroidCpuMetric_Thread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *string                   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Metrics *AndroidCpuMetric_Metrics `protobuf:"bytes,4,opt,name=metrics" json:"metrics,omitempty"`
	// Breakdowns of above metrics.
	Core     []*AndroidCpuMetric_CoreData     `protobuf:"bytes,2,rep,name=core" json:"core,omitempty"`
	CoreType []*AndroidCpuMetric_CoreTypeData `protobuf:"bytes,5,rep,name=core_type,json=coreType" json:"core_type,omitempty"`
}

func (x *AndroidCpuMetric_Thread) Reset() {
	*x = AndroidCpuMetric_Thread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidCpuMetric_Thread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidCpuMetric_Thread) ProtoMessage() {}

func (x *AndroidCpuMetric_Thread) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidCpuMetric_Thread.ProtoReflect.Descriptor instead.
func (*AndroidCpuMetric_Thread) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{1, 3}
}

func (x *AndroidCpuMetric_Thread) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AndroidCpuMetric_Thread) GetMetrics() *AndroidCpuMetric_Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *AndroidCpuMetric_Thread) GetCore() []*AndroidCpuMetric_CoreData {
	if x != nil {
		return x.Core
	}
	return nil
}

func (x *AndroidCpuMetric_Thread) GetCoreType() []*AndroidCpuMetric_CoreTypeData {
	if x != nil {
		return x.CoreType
	}
	return nil
}

// Next id: 8
type AndroidCpuMetric_Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *string                   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Metrics *AndroidCpuMetric_Metrics `protobuf:"bytes,4,opt,name=metrics" json:"metrics,omitempty"`
	// Breakdowns of above metrics.
	Threads  []*AndroidCpuMetric_Thread       `protobuf:"bytes,6,rep,name=threads" json:"threads,omitempty"`
	Core     []*AndroidCpuMetric_CoreData     `protobuf:"bytes,7,rep,name=core" json:"core,omitempty"`
	CoreType []*AndroidCpuMetric_CoreTypeData `protobuf:"bytes,5,rep,name=core_type,json=coreType" json:"core_type,omitempty"`
}

func (x *AndroidCpuMetric_Process) Reset() {
	*x = AndroidCpuMetric_Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidCpuMetric_Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidCpuMetric_Process) ProtoMessage() {}

func (x *AndroidCpuMetric_Process) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidCpuMetric_Process.ProtoReflect.Descriptor instead.
func (*AndroidCpuMetric_Process) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{1, 4}
}

func (x *AndroidCpuMetric_Process) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AndroidCpuMetric_Process) GetMetrics() *AndroidCpuMetric_Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *AndroidCpuMetric_Process) GetThreads() []*AndroidCpuMetric_Thread {
	if x != nil {
		return x.Threads
	}
	return nil
}

func (x *AndroidCpuMetric_Process) GetCore() []*AndroidCpuMetric_CoreData {
	if x != nil {
		return x.Core
	}
	return nil
}

func (x *AndroidCpuMetric_Process) GetCoreType() []*AndroidCpuMetric_CoreTypeData {
	if x != nil {
		return x.CoreType
	}
	return nil
}

// Package metadata from Android package list.
type AndroidProcessMetadata_Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName    *string `protobuf:"bytes,1,opt,name=package_name,json=packageName" json:"package_name,omitempty"`
	ApkVersionCode *int64  `protobuf:"varint,2,opt,name=apk_version_code,json=apkVersionCode" json:"apk_version_code,omitempty"`
	Debuggable     *bool   `protobuf:"varint,3,opt,name=debuggable" json:"debuggable,omitempty"`
}

func (x *AndroidProcessMetadata_Package) Reset() {
	*x = AndroidProcessMetadata_Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidProcessMetadata_Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidProcessMetadata_Package) ProtoMessage() {}

func (x *AndroidProcessMetadata_Package) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidProcessMetadata_Package.ProtoReflect.Descriptor instead.
func (*AndroidProcessMetadata_Package) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{3, 0}
}

func (x *AndroidProcessMetadata_Package) GetPackageName() string {
	if x != nil && x.PackageName != nil {
		return *x.PackageName
	}
	return ""
}

func (x *AndroidProcessMetadata_Package) GetApkVersionCode() int64 {
	if x != nil && x.ApkVersionCode != nil {
		return *x.ApkVersionCode
	}
	return 0
}

func (x *AndroidProcessMetadata_Package) GetDebuggable() bool {
	if x != nil && x.Debuggable != nil {
		return *x.Debuggable
	}
	return false
}

type HeapProfileCallsites_Frame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	MappingName *string `protobuf:"bytes,2,opt,name=mapping_name,json=mappingName" json:"mapping_name,omitempty"`
}

func (x *HeapProfileCallsites_Frame) Reset() {
	*x = HeapProfileCallsites_Frame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeapProfileCallsites_Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeapProfileCallsites_Frame) ProtoMessage() {}

func (x *HeapProfileCallsites_Frame) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeapProfileCallsites_Frame.ProtoReflect.Descriptor instead.
func (*HeapProfileCallsites_Frame) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{4, 0}
}

func (x *HeapProfileCallsites_Frame) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *HeapProfileCallsites_Frame) GetMappingName() string {
	if x != nil && x.MappingName != nil {
		return *x.MappingName
	}
	return ""
}

type HeapProfileCallsites_Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Count of objects allocated
	TotalCount *int64 `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	// Count of bytes allocated
	TotalBytes *int64 `protobuf:"varint,2,opt,name=total_bytes,json=totalBytes" json:"total_bytes,omitempty"`
	// Count of allocated objects that were not freed
	DeltaCount *int64 `protobuf:"varint,3,opt,name=delta_count,json=deltaCount" json:"delta_count,omitempty"`
	// Count of allocated bytes that were not freed
	DeltaBytes *int64 `protobuf:"varint,4,opt,name=delta_bytes,json=deltaBytes" json:"delta_bytes,omitempty"`
}

func (x *HeapProfileCallsites_Counters) Reset() {
	*x = HeapProfileCallsites_Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeapProfileCallsites_Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeapProfileCallsites_Counters) ProtoMessage() {}

func (x *HeapProfileCallsites_Counters) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeapProfileCallsites_Counters.ProtoReflect.Descriptor instead.
func (*HeapProfileCallsites_Counters) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{4, 1}
}

func (x *HeapProfileCallsites_Counters) GetTotalCount() int64 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *HeapProfileCallsites_Counters) GetTotalBytes() int64 {
	if x != nil && x.TotalBytes != nil {
		return *x.TotalBytes
	}
	return 0
}

func (x *HeapProfileCallsites_Counters) GetDeltaCount() int64 {
	if x != nil && x.DeltaCount != nil {
		return *x.DeltaCount
	}
	return 0
}

func (x *HeapProfileCallsites_Counters) GetDeltaBytes() int64 {
	if x != nil && x.DeltaBytes != nil {
		return *x.DeltaBytes
	}
	return 0
}

type HeapProfileCallsites_Callsite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash unambiguously identifies a callsite in a heap profile (as a
	// traversal from the root node). It is based on the symbol names (instead
	// of the addresses).
	Hash       *int64 `protobuf:"varint,1,opt,name=hash" json:"hash,omitempty"`
	ParentHash *int64 `protobuf:"varint,2,opt,name=parent_hash,json=parentHash" json:"parent_hash,omitempty"`
	// Leaf frame of the callsite. Use parent_hash to traverse to parent nodes.
	Frame       *HeapProfileCallsites_Frame    `protobuf:"bytes,3,opt,name=frame" json:"frame,omitempty"`
	SelfAllocs  *HeapProfileCallsites_Counters `protobuf:"bytes,4,opt,name=self_allocs,json=selfAllocs" json:"self_allocs,omitempty"`
	ChildAllocs *HeapProfileCallsites_Counters `protobuf:"bytes,5,opt,name=child_allocs,json=childAllocs" json:"child_allocs,omitempty"`
}

func (x *HeapProfileCallsites_Callsite) Reset() {
	*x = HeapProfileCallsites_Callsite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeapProfileCallsites_Callsite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeapProfileCallsites_Callsite) ProtoMessage() {}

func (x *HeapProfileCallsites_Callsite) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeapProfileCallsites_Callsite.ProtoReflect.Descriptor instead.
func (*HeapProfileCallsites_Callsite) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{4, 2}
}

func (x *HeapProfileCallsites_Callsite) GetHash() int64 {
	if x != nil && x.Hash != nil {
		return *x.Hash
	}
	return 0
}

func (x *HeapProfileCallsites_Callsite) GetParentHash() int64 {
	if x != nil && x.ParentHash != nil {
		return *x.ParentHash
	}
	return 0
}

func (x *HeapProfileCallsites_Callsite) GetFrame() *HeapProfileCallsites_Frame {
	if x != nil {
		return x.Frame
	}
	return nil
}

func (x *HeapProfileCallsites_Callsite) GetSelfAllocs() *HeapProfileCallsites_Counters {
	if x != nil {
		return x.SelfAllocs
	}
	return nil
}

func (x *HeapProfileCallsites_Callsite) GetChildAllocs() *HeapProfileCallsites_Counters {
	if x != nil {
		return x.ChildAllocs
	}
	return nil
}

// Callsites per process instance.
// Next id: 8
type HeapProfileCallsites_InstanceStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid *uint32 `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	// TODO(ilkos): Remove process_name in favour of the metadata.
	ProcessName *string                          `protobuf:"bytes,2,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	Process     *AndroidProcessMetadata          `protobuf:"bytes,6,opt,name=process" json:"process,omitempty"`
	Callsites   []*HeapProfileCallsites_Callsite `protobuf:"bytes,3,rep,name=callsites" json:"callsites,omitempty"`
	// Bytes allocated via malloc but not freed.
	ProfileDeltaBytes *int64 `protobuf:"varint,4,opt,name=profile_delta_bytes,json=profileDeltaBytes" json:"profile_delta_bytes,omitempty"`
	// Bytes allocated via malloc irrespective of whether they were freed.
	ProfileTotalBytes *int64 `protobuf:"varint,5,opt,name=profile_total_bytes,json=profileTotalBytes" json:"profile_total_bytes,omitempty"`
	// Peak anon RSS + swap for this process
	MaxAnonRssAndSwapBytes *int64 `protobuf:"varint,7,opt,name=max_anon_rss_and_swap_bytes,json=maxAnonRssAndSwapBytes" json:"max_anon_rss_and_swap_bytes,omitempty"`
}

func (x *HeapProfileCallsites_InstanceStats) Reset() {
	*x = HeapProfileCallsites_InstanceStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeapProfileCallsites_InstanceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeapProfileCallsites_InstanceStats) ProtoMessage() {}

func (x *HeapProfileCallsites_InstanceStats) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeapProfileCallsites_InstanceStats.ProtoReflect.Descriptor instead.
func (*HeapProfileCallsites_InstanceStats) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{4, 3}
}

func (x *HeapProfileCallsites_InstanceStats) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *HeapProfileCallsites_InstanceStats) GetProcessName() string {
	if x != nil && x.ProcessName != nil {
		return *x.ProcessName
	}
	return ""
}

func (x *HeapProfileCallsites_InstanceStats) GetProcess() *AndroidProcessMetadata {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *HeapProfileCallsites_InstanceStats) GetCallsites() []*HeapProfileCallsites_Callsite {
	if x != nil {
		return x.Callsites
	}
	return nil
}

func (x *HeapProfileCallsites_InstanceStats) GetProfileDeltaBytes() int64 {
	if x != nil && x.ProfileDeltaBytes != nil {
		return *x.ProfileDeltaBytes
	}
	return 0
}

func (x *HeapProfileCallsites_InstanceStats) GetProfileTotalBytes() int64 {
	if x != nil && x.ProfileTotalBytes != nil {
		return *x.ProfileTotalBytes
	}
	return 0
}

func (x *HeapProfileCallsites_InstanceStats) GetMaxAnonRssAndSwapBytes() int64 {
	if x != nil && x.MaxAnonRssAndSwapBytes != nil {
		return *x.MaxAnonRssAndSwapBytes
	}
	return 0
}

type AndroidIonMetric_Buffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	AvgSizeBytes *float64 `protobuf:"fixed64,2,opt,name=avg_size_bytes,json=avgSizeBytes" json:"avg_size_bytes,omitempty"`
	MinSizeBytes *float64 `protobuf:"fixed64,3,opt,name=min_size_bytes,json=minSizeBytes" json:"min_size_bytes,omitempty"`
	MaxSizeBytes *float64 `protobuf:"fixed64,4,opt,name=max_size_bytes,json=maxSizeBytes" json:"max_size_bytes,omitempty"`
	// Total allocation size.
	// Essentially the sum of positive allocs (-> new buffers).
	TotalAllocSizeBytes *float64 `protobuf:"fixed64,5,opt,name=total_alloc_size_bytes,json=totalAllocSizeBytes" json:"total_alloc_size_bytes,omitempty"`
}

func (x *AndroidIonMetric_Buffer) Reset() {
	*x = AndroidIonMetric_Buffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidIonMetric_Buffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidIonMetric_Buffer) ProtoMessage() {}

func (x *AndroidIonMetric_Buffer) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidIonMetric_Buffer.ProtoReflect.Descriptor instead.
func (*AndroidIonMetric_Buffer) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{7, 0}
}

func (x *AndroidIonMetric_Buffer) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AndroidIonMetric_Buffer) GetAvgSizeBytes() float64 {
	if x != nil && x.AvgSizeBytes != nil {
		return *x.AvgSizeBytes
	}
	return 0
}

func (x *AndroidIonMetric_Buffer) GetMinSizeBytes() float64 {
	if x != nil && x.MinSizeBytes != nil {
		return *x.MinSizeBytes
	}
	return 0
}

func (x *AndroidIonMetric_Buffer) GetMaxSizeBytes() float64 {
	if x != nil && x.MaxSizeBytes != nil {
		return *x.MaxSizeBytes
	}
	return 0
}

func (x *AndroidIonMetric_Buffer) GetTotalAllocSizeBytes() float64 {
	if x != nil && x.TotalAllocSizeBytes != nil {
		return *x.TotalAllocSizeBytes
	}
	return 0
}

type JavaHeapHistogram_TypeCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName          *string `protobuf:"bytes,1,opt,name=type_name,json=typeName" json:"type_name,omitempty"`
	ObjCount          *uint32 `protobuf:"varint,2,opt,name=obj_count,json=objCount" json:"obj_count,omitempty"`
	ReachableObjCount *uint32 `protobuf:"varint,3,opt,name=reachable_obj_count,json=reachableObjCount" json:"reachable_obj_count,omitempty"`
}

func (x *JavaHeapHistogram_TypeCount) Reset() {
	*x = JavaHeapHistogram_TypeCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JavaHeapHistogram_TypeCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaHeapHistogram_TypeCount) ProtoMessage() {}

func (x *JavaHeapHistogram_TypeCount) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaHeapHistogram_TypeCount.ProtoReflect.Descriptor instead.
func (*JavaHeapHistogram_TypeCount) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{8, 0}
}

func (x *JavaHeapHistogram_TypeCount) GetTypeName() string {
	if x != nil && x.TypeName != nil {
		return *x.TypeName
	}
	return ""
}

func (x *JavaHeapHistogram_TypeCount) GetObjCount() uint32 {
	if x != nil && x.ObjCount != nil {
		return *x.ObjCount
	}
	return 0
}

func (x *JavaHeapHistogram_TypeCount) GetReachableObjCount() uint32 {
	if x != nil && x.ReachableObjCount != nil {
		return *x.ReachableObjCount
	}
	return 0
}

type JavaHeapHistogram_Sample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts        *int64                         `protobuf:"varint,1,opt,name=ts" json:"ts,omitempty"`
	TypeCount []*JavaHeapHistogram_TypeCount `protobuf:"bytes,2,rep,name=type_count,json=typeCount" json:"type_count,omitempty"`
}

func (x *JavaHeapHistogram_Sample) Reset() {
	*x = JavaHeapHistogram_Sample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JavaHeapHistogram_Sample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaHeapHistogram_Sample) ProtoMessage() {}

func (x *JavaHeapHistogram_Sample) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaHeapHistogram_Sample.ProtoReflect.Descriptor instead.
func (*JavaHeapHistogram_Sample) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{8, 1}
}

func (x *JavaHeapHistogram_Sample) GetTs() int64 {
	if x != nil && x.Ts != nil {
		return *x.Ts
	}
	return 0
}

func (x *JavaHeapHistogram_Sample) GetTypeCount() []*JavaHeapHistogram_TypeCount {
	if x != nil {
		return x.TypeCount
	}
	return nil
}

// Heap stats per process. One sample per dump (with continuous dump you can
// have more samples differentiated by ts).
type JavaHeapHistogram_InstanceStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Upid    *uint32                     `protobuf:"varint,1,opt,name=upid" json:"upid,omitempty"`
	Process *AndroidProcessMetadata     `protobuf:"bytes,2,opt,name=process" json:"process,omitempty"`
	Samples []*JavaHeapHistogram_Sample `protobuf:"bytes,3,rep,name=samples" json:"samples,omitempty"`
}

func (x *JavaHeapHistogram_InstanceStats) Reset() {
	*x = JavaHeapHistogram_InstanceStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JavaHeapHistogram_InstanceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaHeapHistogram_InstanceStats) ProtoMessage() {}

func (x *JavaHeapHistogram_InstanceStats) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaHeapHistogram_InstanceStats.ProtoReflect.Descriptor instead.
func (*JavaHeapHistogram_InstanceStats) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{8, 2}
}

func (x *JavaHeapHistogram_InstanceStats) GetUpid() uint32 {
	if x != nil && x.Upid != nil {
		return *x.Upid
	}
	return 0
}

func (x *JavaHeapHistogram_InstanceStats) GetProcess() *AndroidProcessMetadata {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *JavaHeapHistogram_InstanceStats) GetSamples() []*JavaHeapHistogram_Sample {
	if x != nil {
		return x.Samples
	}
	return nil
}

type JavaHeapStats_HeapRoots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootType *string `protobuf:"bytes,1,opt,name=root_type,json=rootType" json:"root_type,omitempty"`
	TypeName *string `protobuf:"bytes,2,opt,name=type_name,json=typeName" json:"type_name,omitempty"`
	ObjCount *int64  `protobuf:"varint,3,opt,name=obj_count,json=objCount" json:"obj_count,omitempty"`
}

func (x *JavaHeapStats_HeapRoots) Reset() {
	*x = JavaHeapStats_HeapRoots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JavaHeapStats_HeapRoots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaHeapStats_HeapRoots) ProtoMessage() {}

func (x *JavaHeapStats_HeapRoots) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaHeapStats_HeapRoots.ProtoReflect.Descriptor instead.
func (*JavaHeapStats_HeapRoots) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{9, 0}
}

func (x *JavaHeapStats_HeapRoots) GetRootType() string {
	if x != nil && x.RootType != nil {
		return *x.RootType
	}
	return ""
}

func (x *JavaHeapStats_HeapRoots) GetTypeName() string {
	if x != nil && x.TypeName != nil {
		return *x.TypeName
	}
	return ""
}

func (x *JavaHeapStats_HeapRoots) GetObjCount() int64 {
	if x != nil && x.ObjCount != nil {
		return *x.ObjCount
	}
	return 0
}

// Next id: 7
type JavaHeapStats_Sample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts *int64 `protobuf:"varint,1,opt,name=ts" json:"ts,omitempty"`
	// Size of the Java heap in bytes
	HeapSize *int64 `protobuf:"varint,2,opt,name=heap_size,json=heapSize" json:"heap_size,omitempty"`
	ObjCount *int64 `protobuf:"varint,4,opt,name=obj_count,json=objCount" json:"obj_count,omitempty"`
	// Size of the reachable objects in bytes.
	ReachableHeapSize *int64 `protobuf:"varint,3,opt,name=reachable_heap_size,json=reachableHeapSize" json:"reachable_heap_size,omitempty"`
	ReachableObjCount *int64 `protobuf:"varint,5,opt,name=reachable_obj_count,json=reachableObjCount" json:"reachable_obj_count,omitempty"`
	// Sum of anonymous RSS + swap pages in bytes.
	AnonRssAndSwapSize *int64 `protobuf:"varint,6,opt,name=anon_rss_and_swap_size,json=anonRssAndSwapSize" json:"anon_rss_and_swap_size,omitempty"`
	// ART root objects
	Roots []*JavaHeapStats_HeapRoots `protobuf:"bytes,7,rep,name=roots" json:"roots,omitempty"`
}

func (x *JavaHeapStats_Sample) Reset() {
	*x = JavaHeapStats_Sample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JavaHeapStats_Sample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaHeapStats_Sample) ProtoMessage() {}

func (x *JavaHeapStats_Sample) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaHeapStats_Sample.ProtoReflect.Descriptor instead.
func (*JavaHeapStats_Sample) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{9, 1}
}

func (x *JavaHeapStats_Sample) GetTs() int64 {
	if x != nil && x.Ts != nil {
		return *x.Ts
	}
	return 0
}

func (x *JavaHeapStats_Sample) GetHeapSize() int64 {
	if x != nil && x.HeapSize != nil {
		return *x.HeapSize
	}
	return 0
}

func (x *JavaHeapStats_Sample) GetObjCount() int64 {
	if x != nil && x.ObjCount != nil {
		return *x.ObjCount
	}
	return 0
}

func (x *JavaHeapStats_Sample) GetReachableHeapSize() int64 {
	if x != nil && x.ReachableHeapSize != nil {
		return *x.ReachableHeapSize
	}
	return 0
}

func (x *JavaHeapStats_Sample) GetReachableObjCount() int64 {
	if x != nil && x.ReachableObjCount != nil {
		return *x.ReachableObjCount
	}
	return 0
}

func (x *JavaHeapStats_Sample) GetAnonRssAndSwapSize() int64 {
	if x != nil && x.AnonRssAndSwapSize != nil {
		return *x.AnonRssAndSwapSize
	}
	return 0
}

func (x *JavaHeapStats_Sample) GetRoots() []*JavaHeapStats_HeapRoots {
	if x != nil {
		return x.Roots
	}
	return nil
}

// Heap stats per process. One sample per dump (can be > 1 if continuous
// dump is enabled).
type JavaHeapStats_InstanceStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Upid    *uint32                 `protobuf:"varint,1,opt,name=upid" json:"upid,omitempty"`
	Process *AndroidProcessMetadata `protobuf:"bytes,2,opt,name=process" json:"process,omitempty"`
	Samples []*JavaHeapStats_Sample `protobuf:"bytes,3,rep,name=samples" json:"samples,omitempty"`
}

func (x *JavaHeapStats_InstanceStats) Reset() {
	*x = JavaHeapStats_InstanceStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JavaHeapStats_InstanceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaHeapStats_InstanceStats) ProtoMessage() {}

func (x *JavaHeapStats_InstanceStats) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaHeapStats_InstanceStats.ProtoReflect.Descriptor instead.
func (*JavaHeapStats_InstanceStats) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{9, 2}
}

func (x *JavaHeapStats_InstanceStats) GetUpid() uint32 {
	if x != nil && x.Upid != nil {
		return *x.Upid
	}
	return 0
}

func (x *JavaHeapStats_InstanceStats) GetProcess() *AndroidProcessMetadata {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *JavaHeapStats_InstanceStats) GetSamples() []*JavaHeapStats_Sample {
	if x != nil {
		return x.Samples
	}
	return nil
}

type AndroidLmkMetric_ByOomScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OomScoreAdj *int32 `protobuf:"varint,1,opt,name=oom_score_adj,json=oomScoreAdj" json:"oom_score_adj,omitempty"`
	Count       *int32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *AndroidLmkMetric_ByOomScore) Reset() {
	*x = AndroidLmkMetric_ByOomScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidLmkMetric_ByOomScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidLmkMetric_ByOomScore) ProtoMessage() {}

func (x *AndroidLmkMetric_ByOomScore) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidLmkMetric_ByOomScore.ProtoReflect.Descriptor instead.
func (*AndroidLmkMetric_ByOomScore) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{10, 0}
}

func (x *AndroidLmkMetric_ByOomScore) GetOomScoreAdj() int32 {
	if x != nil && x.OomScoreAdj != nil {
		return *x.OomScoreAdj
	}
	return 0
}

func (x *AndroidLmkMetric_ByOomScore) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type AndroidLmkReasonMetric_Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Process *AndroidProcessMetadata `protobuf:"bytes,1,opt,name=process" json:"process,omitempty"`
	// OOM score adj of the process.
	OomScoreAdj *int32 `protobuf:"varint,2,opt,name=oom_score_adj,json=oomScoreAdj" json:"oom_score_adj,omitempty"`
	// RSS + swap.
	Size          *int64 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	FileRssBytes  *int64 `protobuf:"varint,4,opt,name=file_rss_bytes,json=fileRssBytes" json:"file_rss_bytes,omitempty"`
	AnonRssBytes  *int64 `protobuf:"varint,5,opt,name=anon_rss_bytes,json=anonRssBytes" json:"anon_rss_bytes,omitempty"`
	ShmemRssBytes *int64 `protobuf:"varint,6,opt,name=shmem_rss_bytes,json=shmemRssBytes" json:"shmem_rss_bytes,omitempty"`
	SwapBytes     *int64 `protobuf:"varint,7,opt,name=swap_bytes,json=swapBytes" json:"swap_bytes,omitempty"`
}

func (x *AndroidLmkReasonMetric_Process) Reset() {
	*x = AndroidLmkReasonMetric_Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidLmkReasonMetric_Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidLmkReasonMetric_Process) ProtoMessage() {}

func (x *AndroidLmkReasonMetric_Process) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidLmkReasonMetric_Process.ProtoReflect.Descriptor instead.
func (*AndroidLmkReasonMetric_Process) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{11, 0}
}

func (x *AndroidLmkReasonMetric_Process) GetProcess() *AndroidProcessMetadata {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *AndroidLmkReasonMetric_Process) GetOomScoreAdj() int32 {
	if x != nil && x.OomScoreAdj != nil {
		return *x.OomScoreAdj
	}
	return 0
}

func (x *AndroidLmkReasonMetric_Process) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *AndroidLmkReasonMetric_Process) GetFileRssBytes() int64 {
	if x != nil && x.FileRssBytes != nil {
		return *x.FileRssBytes
	}
	return 0
}

func (x *AndroidLmkReasonMetric_Process) GetAnonRssBytes() int64 {
	if x != nil && x.AnonRssBytes != nil {
		return *x.AnonRssBytes
	}
	return 0
}

func (x *AndroidLmkReasonMetric_Process) GetShmemRssBytes() int64 {
	if x != nil && x.ShmemRssBytes != nil {
		return *x.ShmemRssBytes
	}
	return 0
}

func (x *AndroidLmkReasonMetric_Process) GetSwapBytes() int64 {
	if x != nil && x.SwapBytes != nil {
		return *x.SwapBytes
	}
	return 0
}

type AndroidLmkReasonMetric_Lmk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OOM score adj of the LMK'ed process.
	OomScoreAdj *int32 `protobuf:"varint,1,opt,name=oom_score_adj,json=oomScoreAdj" json:"oom_score_adj,omitempty"`
	// Total size of the ION heap in bytes during this LMK.
	IonHeapsBytes *int64 `protobuf:"varint,4,opt,name=ion_heaps_bytes,json=ionHeapsBytes" json:"ion_heaps_bytes,omitempty"`
	// Deprecated. Prefer ion_heaps_bytes.
	SystemIonHeapSize *int64 `protobuf:"varint,2,opt,name=system_ion_heap_size,json=systemIonHeapSize" json:"system_ion_heap_size,omitempty"`
	// Processes present during this LMK.
	Processes []*AndroidLmkReasonMetric_Process `protobuf:"bytes,3,rep,name=processes" json:"processes,omitempty"`
}

func (x *AndroidLmkReasonMetric_Lmk) Reset() {
	*x = AndroidLmkReasonMetric_Lmk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidLmkReasonMetric_Lmk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidLmkReasonMetric_Lmk) ProtoMessage() {}

func (x *AndroidLmkReasonMetric_Lmk) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidLmkReasonMetric_Lmk.ProtoReflect.Descriptor instead.
func (*AndroidLmkReasonMetric_Lmk) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{11, 1}
}

func (x *AndroidLmkReasonMetric_Lmk) GetOomScoreAdj() int32 {
	if x != nil && x.OomScoreAdj != nil {
		return *x.OomScoreAdj
	}
	return 0
}

func (x *AndroidLmkReasonMetric_Lmk) GetIonHeapsBytes() int64 {
	if x != nil && x.IonHeapsBytes != nil {
		return *x.IonHeapsBytes
	}
	return 0
}

func (x *AndroidLmkReasonMetric_Lmk) GetSystemIonHeapSize() int64 {
	if x != nil && x.SystemIonHeapSize != nil {
		return *x.SystemIonHeapSize
	}
	return 0
}

func (x *AndroidLmkReasonMetric_Lmk) GetProcesses() []*AndroidLmkReasonMetric_Process {
	if x != nil {
		return x.Processes
	}
	return nil
}

type AndroidMemoryMetric_ProcessMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessName       *string                                    `protobuf:"bytes,1,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	TotalCounters     *AndroidMemoryMetric_ProcessMemoryCounters `protobuf:"bytes,2,opt,name=total_counters,json=totalCounters" json:"total_counters,omitempty"`
	PriorityBreakdown []*AndroidMemoryMetric_PriorityBreakdown   `protobuf:"bytes,3,rep,name=priority_breakdown,json=priorityBreakdown" json:"priority_breakdown,omitempty"`
}

func (x *AndroidMemoryMetric_ProcessMetrics) Reset() {
	*x = AndroidMemoryMetric_ProcessMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidMemoryMetric_ProcessMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidMemoryMetric_ProcessMetrics) ProtoMessage() {}

func (x *AndroidMemoryMetric_ProcessMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidMemoryMetric_ProcessMetrics.ProtoReflect.Descriptor instead.
func (*AndroidMemoryMetric_ProcessMetrics) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{12, 0}
}

func (x *AndroidMemoryMetric_ProcessMetrics) GetProcessName() string {
	if x != nil && x.ProcessName != nil {
		return *x.ProcessName
	}
	return ""
}

func (x *AndroidMemoryMetric_ProcessMetrics) GetTotalCounters() *AndroidMemoryMetric_ProcessMemoryCounters {
	if x != nil {
		return x.TotalCounters
	}
	return nil
}

func (x *AndroidMemoryMetric_ProcessMetrics) GetPriorityBreakdown() []*AndroidMemoryMetric_PriorityBreakdown {
	if x != nil {
		return x.PriorityBreakdown
	}
	return nil
}

type AndroidMemoryMetric_PriorityBreakdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority *string                                    `protobuf:"bytes,1,opt,name=priority" json:"priority,omitempty"`
	Counters *AndroidMemoryMetric_ProcessMemoryCounters `protobuf:"bytes,2,opt,name=counters" json:"counters,omitempty"`
}

func (x *AndroidMemoryMetric_PriorityBreakdown) Reset() {
	*x = AndroidMemoryMetric_PriorityBreakdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidMemoryMetric_PriorityBreakdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidMemoryMetric_PriorityBreakdown) ProtoMessage() {}

func (x *AndroidMemoryMetric_PriorityBreakdown) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidMemoryMetric_PriorityBreakdown.ProtoReflect.Descriptor instead.
func (*AndroidMemoryMetric_PriorityBreakdown) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{12, 1}
}

func (x *AndroidMemoryMetric_PriorityBreakdown) GetPriority() string {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return ""
}

func (x *AndroidMemoryMetric_PriorityBreakdown) GetCounters() *AndroidMemoryMetric_ProcessMemoryCounters {
	if x != nil {
		return x.Counters
	}
	return nil
}

type AndroidMemoryMetric_ProcessMemoryCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnonRss     *AndroidMemoryMetric_Counter `protobuf:"bytes,1,opt,name=anon_rss,json=anonRss" json:"anon_rss,omitempty"`
	FileRss     *AndroidMemoryMetric_Counter `protobuf:"bytes,2,opt,name=file_rss,json=fileRss" json:"file_rss,omitempty"`
	Swap        *AndroidMemoryMetric_Counter `protobuf:"bytes,3,opt,name=swap" json:"swap,omitempty"`
	AnonAndSwap *AndroidMemoryMetric_Counter `protobuf:"bytes,4,opt,name=anon_and_swap,json=anonAndSwap" json:"anon_and_swap,omitempty"`
	// Available when ART trace events are available.
	JavaHeap *AndroidMemoryMetric_Counter `protobuf:"bytes,5,opt,name=java_heap,json=javaHeap" json:"java_heap,omitempty"`
}

func (x *AndroidMemoryMetric_ProcessMemoryCounters) Reset() {
	*x = AndroidMemoryMetric_ProcessMemoryCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidMemoryMetric_ProcessMemoryCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidMemoryMetric_ProcessMemoryCounters) ProtoMessage() {}

func (x *AndroidMemoryMetric_ProcessMemoryCounters) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidMemoryMetric_ProcessMemoryCounters.ProtoReflect.Descriptor instead.
func (*AndroidMemoryMetric_ProcessMemoryCounters) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{12, 2}
}

func (x *AndroidMemoryMetric_ProcessMemoryCounters) GetAnonRss() *AndroidMemoryMetric_Counter {
	if x != nil {
		return x.AnonRss
	}
	return nil
}

func (x *AndroidMemoryMetric_ProcessMemoryCounters) GetFileRss() *AndroidMemoryMetric_Counter {
	if x != nil {
		return x.FileRss
	}
	return nil
}

func (x *AndroidMemoryMetric_ProcessMemoryCounters) GetSwap() *AndroidMemoryMetric_Counter {
	if x != nil {
		return x.Swap
	}
	return nil
}

func (x *AndroidMemoryMetric_ProcessMemoryCounters) GetAnonAndSwap() *AndroidMemoryMetric_Counter {
	if x != nil {
		return x.AnonAndSwap
	}
	return nil
}

func (x *AndroidMemoryMetric_ProcessMemoryCounters) GetJavaHeap() *AndroidMemoryMetric_Counter {
	if x != nil {
		return x.JavaHeap
	}
	return nil
}

type AndroidMemoryMetric_Counter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min *float64 `protobuf:"fixed64,1,opt,name=min" json:"min,omitempty"`
	Max *float64 `protobuf:"fixed64,2,opt,name=max" json:"max,omitempty"`
	Avg *float64 `protobuf:"fixed64,3,opt,name=avg" json:"avg,omitempty"`
}

func (x *AndroidMemoryMetric_Counter) Reset() {
	*x = AndroidMemoryMetric_Counter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidMemoryMetric_Counter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidMemoryMetric_Counter) ProtoMessage() {}

func (x *AndroidMemoryMetric_Counter) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidMemoryMetric_Counter.ProtoReflect.Descriptor instead.
func (*AndroidMemoryMetric_Counter) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{12, 3}
}

func (x *AndroidMemoryMetric_Counter) GetMin() float64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *AndroidMemoryMetric_Counter) GetMax() float64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *AndroidMemoryMetric_Counter) GetAvg() float64 {
	if x != nil && x.Avg != nil {
		return *x.Avg
	}
	return 0
}

type AndroidMemoryUnaggregatedMetric_ProcessValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessName *string                                              `protobuf:"bytes,1,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	MemValues   *AndroidMemoryUnaggregatedMetric_ProcessMemoryValues `protobuf:"bytes,2,opt,name=mem_values,json=memValues" json:"mem_values,omitempty"`
}

func (x *AndroidMemoryUnaggregatedMetric_ProcessValues) Reset() {
	*x = AndroidMemoryUnaggregatedMetric_ProcessValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidMemoryUnaggregatedMetric_ProcessValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidMemoryUnaggregatedMetric_ProcessValues) ProtoMessage() {}

func (x *AndroidMemoryUnaggregatedMetric_ProcessValues) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidMemoryUnaggregatedMetric_ProcessValues.ProtoReflect.Descriptor instead.
func (*AndroidMemoryUnaggregatedMetric_ProcessValues) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{13, 0}
}

func (x *AndroidMemoryUnaggregatedMetric_ProcessValues) GetProcessName() string {
	if x != nil && x.ProcessName != nil {
		return *x.ProcessName
	}
	return ""
}

func (x *AndroidMemoryUnaggregatedMetric_ProcessValues) GetMemValues() *AndroidMemoryUnaggregatedMetric_ProcessMemoryValues {
	if x != nil {
		return x.MemValues
	}
	return nil
}

type AndroidMemoryUnaggregatedMetric_ProcessMemoryValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnonRss     []*AndroidMemoryUnaggregatedMetric_Value `protobuf:"bytes,1,rep,name=anon_rss,json=anonRss" json:"anon_rss,omitempty"`
	FileRss     []*AndroidMemoryUnaggregatedMetric_Value `protobuf:"bytes,2,rep,name=file_rss,json=fileRss" json:"file_rss,omitempty"`
	Swap        []*AndroidMemoryUnaggregatedMetric_Value `protobuf:"bytes,3,rep,name=swap" json:"swap,omitempty"`
	AnonAndSwap []*AndroidMemoryUnaggregatedMetric_Value `protobuf:"bytes,4,rep,name=anon_and_swap,json=anonAndSwap" json:"anon_and_swap,omitempty"`
}

func (x *AndroidMemoryUnaggregatedMetric_ProcessMemoryValues) Reset() {
	*x = AndroidMemoryUnaggregatedMetric_ProcessMemoryValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidMemoryUnaggregatedMetric_ProcessMemoryValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidMemoryUnaggregatedMetric_ProcessMemoryValues) ProtoMessage() {}

func (x *AndroidMemoryUnaggregatedMetric_ProcessMemoryValues) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidMemoryUnaggregatedMetric_ProcessMemoryValues.ProtoReflect.Descriptor instead.
func (*AndroidMemoryUnaggregatedMetric_ProcessMemoryValues) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{13, 1}
}

func (x *AndroidMemoryUnaggregatedMetric_ProcessMemoryValues) GetAnonRss() []*AndroidMemoryUnaggregatedMetric_Value {
	if x != nil {
		return x.AnonRss
	}
	return nil
}

func (x *AndroidMemoryUnaggregatedMetric_ProcessMemoryValues) GetFileRss() []*AndroidMemoryUnaggregatedMetric_Value {
	if x != nil {
		return x.FileRss
	}
	return nil
}

func (x *AndroidMemoryUnaggregatedMetric_ProcessMemoryValues) GetSwap() []*AndroidMemoryUnaggregatedMetric_Value {
	if x != nil {
		return x.Swap
	}
	return nil
}

func (x *AndroidMemoryUnaggregatedMetric_ProcessMemoryValues) GetAnonAndSwap() []*AndroidMemoryUnaggregatedMetric_Value {
	if x != nil {
		return x.AnonAndSwap
	}
	return nil
}

type AndroidMemoryUnaggregatedMetric_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts       *int64   `protobuf:"varint,1,opt,name=ts" json:"ts,omitempty"`
	OomScore *int32   `protobuf:"varint,2,opt,name=oom_score,json=oomScore" json:"oom_score,omitempty"`
	Value    *float64 `protobuf:"fixed64,3,opt,name=value" json:"value,omitempty"`
}

func (x *AndroidMemoryUnaggregatedMetric_Value) Reset() {
	*x = AndroidMemoryUnaggregatedMetric_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidMemoryUnaggregatedMetric_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidMemoryUnaggregatedMetric_Value) ProtoMessage() {}

func (x *AndroidMemoryUnaggregatedMetric_Value) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidMemoryUnaggregatedMetric_Value.ProtoReflect.Descriptor instead.
func (*AndroidMemoryUnaggregatedMetric_Value) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{13, 2}
}

func (x *AndroidMemoryUnaggregatedMetric_Value) GetTs() int64 {
	if x != nil && x.Ts != nil {
		return *x.Ts
	}
	return 0
}

func (x *AndroidMemoryUnaggregatedMetric_Value) GetOomScore() int32 {
	if x != nil && x.OomScore != nil {
		return *x.OomScore
	}
	return 0
}

func (x *AndroidMemoryUnaggregatedMetric_Value) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type AndroidPackageList_Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName *string `protobuf:"bytes,1,opt,name=package_name,json=packageName" json:"package_name,omitempty"`
	Uid         *int64  `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	VersionCode *int64  `protobuf:"varint,3,opt,name=version_code,json=versionCode" json:"version_code,omitempty"`
}

func (x *AndroidPackageList_Package) Reset() {
	*x = AndroidPackageList_Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidPackageList_Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidPackageList_Package) ProtoMessage() {}

func (x *AndroidPackageList_Package) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidPackageList_Package.ProtoReflect.Descriptor instead.
func (*AndroidPackageList_Package) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{14, 0}
}

func (x *AndroidPackageList_Package) GetPackageName() string {
	if x != nil && x.PackageName != nil {
		return *x.PackageName
	}
	return ""
}

func (x *AndroidPackageList_Package) GetUid() int64 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *AndroidPackageList_Package) GetVersionCode() int64 {
	if x != nil && x.VersionCode != nil {
		return *x.VersionCode
	}
	return 0
}

// Energy data per Power Rail at given ts.
type AndroidPowerRails_EnergyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time since device boot(CLOCK_BOTTOMTIME) in milli-seconds.
	TimestampMs *int64 `protobuf:"varint,1,opt,name=timestamp_ms,json=timestampMs" json:"timestamp_ms,omitempty"`
	// Accumulated energy since device boot in microwatt-seconds(uws).
	EnergyUws *float64 `protobuf:"fixed64,2,opt,name=energy_uws,json=energyUws" json:"energy_uws,omitempty"`
}

func (x *AndroidPowerRails_EnergyData) Reset() {
	*x = AndroidPowerRails_EnergyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidPowerRails_EnergyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidPowerRails_EnergyData) ProtoMessage() {}

func (x *AndroidPowerRails_EnergyData) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidPowerRails_EnergyData.ProtoReflect.Descriptor instead.
func (*AndroidPowerRails_EnergyData) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{15, 0}
}

func (x *AndroidPowerRails_EnergyData) GetTimestampMs() int64 {
	if x != nil && x.TimestampMs != nil {
		return *x.TimestampMs
	}
	return 0
}

func (x *AndroidPowerRails_EnergyData) GetEnergyUws() float64 {
	if x != nil && x.EnergyUws != nil {
		return *x.EnergyUws
	}
	return 0
}

type AndroidPowerRails_PowerRails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the rail.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Energy data for given rail and for all samples in the trace.
	EnergyData []*AndroidPowerRails_EnergyData `protobuf:"bytes,2,rep,name=energy_data,json=energyData" json:"energy_data,omitempty"`
}

func (x *AndroidPowerRails_PowerRails) Reset() {
	*x = AndroidPowerRails_PowerRails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidPowerRails_PowerRails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidPowerRails_PowerRails) ProtoMessage() {}

func (x *AndroidPowerRails_PowerRails) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidPowerRails_PowerRails.ProtoReflect.Descriptor instead.
func (*AndroidPowerRails_PowerRails) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{15, 1}
}

func (x *AndroidPowerRails_PowerRails) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AndroidPowerRails_PowerRails) GetEnergyData() []*AndroidPowerRails_EnergyData {
	if x != nil {
		return x.EnergyData
	}
	return nil
}

// A simplified view of the task state durations for a thread
// and a span of time.
type AndroidStartupMetric_TaskStateBreakdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunningDurNs              *int64 `protobuf:"varint,1,opt,name=running_dur_ns,json=runningDurNs" json:"running_dur_ns,omitempty"`
	RunnableDurNs             *int64 `protobuf:"varint,2,opt,name=runnable_dur_ns,json=runnableDurNs" json:"runnable_dur_ns,omitempty"`
	UninterruptibleSleepDurNs *int64 `protobuf:"varint,3,opt,name=uninterruptible_sleep_dur_ns,json=uninterruptibleSleepDurNs" json:"uninterruptible_sleep_dur_ns,omitempty"`
	InterruptibleSleepDurNs   *int64 `protobuf:"varint,4,opt,name=interruptible_sleep_dur_ns,json=interruptibleSleepDurNs" json:"interruptible_sleep_dur_ns,omitempty"`
}

func (x *AndroidStartupMetric_TaskStateBreakdown) Reset() {
	*x = AndroidStartupMetric_TaskStateBreakdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidStartupMetric_TaskStateBreakdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidStartupMetric_TaskStateBreakdown) ProtoMessage() {}

func (x *AndroidStartupMetric_TaskStateBreakdown) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidStartupMetric_TaskStateBreakdown.ProtoReflect.Descriptor instead.
func (*AndroidStartupMetric_TaskStateBreakdown) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{16, 0}
}

func (x *AndroidStartupMetric_TaskStateBreakdown) GetRunningDurNs() int64 {
	if x != nil && x.RunningDurNs != nil {
		return *x.RunningDurNs
	}
	return 0
}

func (x *AndroidStartupMetric_TaskStateBreakdown) GetRunnableDurNs() int64 {
	if x != nil && x.RunnableDurNs != nil {
		return *x.RunnableDurNs
	}
	return 0
}

func (x *AndroidStartupMetric_TaskStateBreakdown) GetUninterruptibleSleepDurNs() int64 {
	if x != nil && x.UninterruptibleSleepDurNs != nil {
		return *x.UninterruptibleSleepDurNs
	}
	return 0
}

func (x *AndroidStartupMetric_TaskStateBreakdown) GetInterruptibleSleepDurNs() int64 {
	if x != nil && x.InterruptibleSleepDurNs != nil {
		return *x.InterruptibleSleepDurNs
	}
	return 0
}

type AndroidStartupMetric_Slice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DurNs *int64   `protobuf:"varint,1,opt,name=dur_ns,json=durNs" json:"dur_ns,omitempty"`
	DurMs *float64 `protobuf:"fixed64,2,opt,name=dur_ms,json=durMs" json:"dur_ms,omitempty"`
}

func (x *AndroidStartupMetric_Slice) Reset() {
	*x = AndroidStartupMetric_Slice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidStartupMetric_Slice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidStartupMetric_Slice) ProtoMessage() {}

func (x *AndroidStartupMetric_Slice) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidStartupMetric_Slice.ProtoReflect.Descriptor instead.
func (*AndroidStartupMetric_Slice) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{16, 1}
}

func (x *AndroidStartupMetric_Slice) GetDurNs() int64 {
	if x != nil && x.DurNs != nil {
		return *x.DurNs
	}
	return 0
}

func (x *AndroidStartupMetric_Slice) GetDurMs() float64 {
	if x != nil && x.DurMs != nil {
		return *x.DurMs
	}
	return 0
}

// Timing information spanning the intent received by the
// activity manager to the first frame drawn.
// Next id: 21.
type AndroidStartupMetric_ToFirstFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DurNs                 *int64                                   `protobuf:"varint,1,opt,name=dur_ns,json=durNs" json:"dur_ns,omitempty"`
	DurMs                 *float64                                 `protobuf:"fixed64,17,opt,name=dur_ms,json=durMs" json:"dur_ms,omitempty"`
	MainThreadByTaskState *AndroidStartupMetric_TaskStateBreakdown `protobuf:"bytes,2,opt,name=main_thread_by_task_state,json=mainThreadByTaskState" json:"main_thread_by_task_state,omitempty"`
	// In this timespan, how many processes (apart from the main activity) were
	// spawned.
	OtherProcessesSpawnedCount *uint32 `protobuf:"varint,3,opt,name=other_processes_spawned_count,json=otherProcessesSpawnedCount" json:"other_processes_spawned_count,omitempty"`
	// Total time spent in activity manager between the initial intent
	// and the end of the activity starter.
	TimeActivityManager *AndroidStartupMetric_Slice `protobuf:"bytes,4,opt,name=time_activity_manager,json=timeActivityManager" json:"time_activity_manager,omitempty"`
	// The following slices follow the typical steps post-fork.
	TimeActivityThreadMain *AndroidStartupMetric_Slice `protobuf:"bytes,5,opt,name=time_activity_thread_main,json=timeActivityThreadMain" json:"time_activity_thread_main,omitempty"`
	TimeBindApplication    *AndroidStartupMetric_Slice `protobuf:"bytes,6,opt,name=time_bind_application,json=timeBindApplication" json:"time_bind_application,omitempty"`
	TimeActivityStart      *AndroidStartupMetric_Slice `protobuf:"bytes,7,opt,name=time_activity_start,json=timeActivityStart" json:"time_activity_start,omitempty"`
	TimeActivityResume     *AndroidStartupMetric_Slice `protobuf:"bytes,8,opt,name=time_activity_resume,json=timeActivityResume" json:"time_activity_resume,omitempty"`
	TimeChoreographer      *AndroidStartupMetric_Slice `protobuf:"bytes,9,opt,name=time_choreographer,json=timeChoreographer" json:"time_choreographer,omitempty"`
	// If we are starting a new process, record the duration from the
	// intent being received to the time we call the zygote.
	TimeBeforeStartProcess *AndroidStartupMetric_Slice `protobuf:"bytes,10,opt,name=time_before_start_process,json=timeBeforeStartProcess" json:"time_before_start_process,omitempty"`
	// The actual duration of the process start (based on the zygote slice).
	TimeDuringStartProcess *AndroidStartupMetric_Slice `protobuf:"bytes,11,opt,name=time_during_start_process,json=timeDuringStartProcess" json:"time_during_start_process,omitempty"`
	ToPostFork             *AndroidStartupMetric_Slice `protobuf:"bytes,18,opt,name=to_post_fork,json=toPostFork" json:"to_post_fork,omitempty"`
	ToActivityThreadMain   *AndroidStartupMetric_Slice `protobuf:"bytes,19,opt,name=to_activity_thread_main,json=toActivityThreadMain" json:"to_activity_thread_main,omitempty"`
	ToBindApplication      *AndroidStartupMetric_Slice `protobuf:"bytes,20,opt,name=to_bind_application,json=toBindApplication" json:"to_bind_application,omitempty"`
	TimePostFork           *AndroidStartupMetric_Slice `protobuf:"bytes,16,opt,name=time_post_fork,json=timePostFork" json:"time_post_fork,omitempty"`
}

func (x *AndroidStartupMetric_ToFirstFrame) Reset() {
	*x = AndroidStartupMetric_ToFirstFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidStartupMetric_ToFirstFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidStartupMetric_ToFirstFrame) ProtoMessage() {}

func (x *AndroidStartupMetric_ToFirstFrame) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidStartupMetric_ToFirstFrame.ProtoReflect.Descriptor instead.
func (*AndroidStartupMetric_ToFirstFrame) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{16, 2}
}

func (x *AndroidStartupMetric_ToFirstFrame) GetDurNs() int64 {
	if x != nil && x.DurNs != nil {
		return *x.DurNs
	}
	return 0
}

func (x *AndroidStartupMetric_ToFirstFrame) GetDurMs() float64 {
	if x != nil && x.DurMs != nil {
		return *x.DurMs
	}
	return 0
}

func (x *AndroidStartupMetric_ToFirstFrame) GetMainThreadByTaskState() *AndroidStartupMetric_TaskStateBreakdown {
	if x != nil {
		return x.MainThreadByTaskState
	}
	return nil
}

func (x *AndroidStartupMetric_ToFirstFrame) GetOtherProcessesSpawnedCount() uint32 {
	if x != nil && x.OtherProcessesSpawnedCount != nil {
		return *x.OtherProcessesSpawnedCount
	}
	return 0
}

func (x *AndroidStartupMetric_ToFirstFrame) GetTimeActivityManager() *AndroidStartupMetric_Slice {
	if x != nil {
		return x.TimeActivityManager
	}
	return nil
}

func (x *AndroidStartupMetric_ToFirstFrame) GetTimeActivityThreadMain() *AndroidStartupMetric_Slice {
	if x != nil {
		return x.TimeActivityThreadMain
	}
	return nil
}

func (x *AndroidStartupMetric_ToFirstFrame) GetTimeBindApplication() *AndroidStartupMetric_Slice {
	if x != nil {
		return x.TimeBindApplication
	}
	return nil
}

func (x *AndroidStartupMetric_ToFirstFrame) GetTimeActivityStart() *AndroidStartupMetric_Slice {
	if x != nil {
		return x.TimeActivityStart
	}
	return nil
}

func (x *AndroidStartupMetric_ToFirstFrame) GetTimeActivityResume() *AndroidStartupMetric_Slice {
	if x != nil {
		return x.TimeActivityResume
	}
	return nil
}

func (x *AndroidStartupMetric_ToFirstFrame) GetTimeChoreographer() *AndroidStartupMetric_Slice {
	if x != nil {
		return x.TimeChoreographer
	}
	return nil
}

func (x *AndroidStartupMetric_ToFirstFrame) GetTimeBeforeStartProcess() *AndroidStartupMetric_Slice {
	if x != nil {
		return x.TimeBeforeStartProcess
	}
	return nil
}

func (x *AndroidStartupMetric_ToFirstFrame) GetTimeDuringStartProcess() *AndroidStartupMetric_Slice {
	if x != nil {
		return x.TimeDuringStartProcess
	}
	return nil
}

func (x *AndroidStartupMetric_ToFirstFrame) GetToPostFork() *AndroidStartupMetric_Slice {
	if x != nil {
		return x.ToPostFork
	}
	return nil
}

func (x *AndroidStartupMetric_ToFirstFrame) GetToActivityThreadMain() *AndroidStartupMetric_Slice {
	if x != nil {
		return x.ToActivityThreadMain
	}
	return nil
}

func (x *AndroidStartupMetric_ToFirstFrame) GetToBindApplication() *AndroidStartupMetric_Slice {
	if x != nil {
		return x.ToBindApplication
	}
	return nil
}

func (x *AndroidStartupMetric_ToFirstFrame) GetTimePostFork() *AndroidStartupMetric_Slice {
	if x != nil {
		return x.TimePostFork
	}
	return nil
}

// Metrics about startup which were developed by looking at experiments using
// high-speed cameras (HSC).
type AndroidStartupMetric_HscMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The duration of the full "startup" as defined by HSC tests.
	FullStartup *AndroidStartupMetric_Slice `protobuf:"bytes,1,opt,name=full_startup,json=fullStartup" json:"full_startup,omitempty"`
}

func (x *AndroidStartupMetric_HscMetrics) Reset() {
	*x = AndroidStartupMetric_HscMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidStartupMetric_HscMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidStartupMetric_HscMetrics) ProtoMessage() {}

func (x *AndroidStartupMetric_HscMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidStartupMetric_HscMetrics.ProtoReflect.Descriptor instead.
func (*AndroidStartupMetric_HscMetrics) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{16, 3}
}

func (x *AndroidStartupMetric_HscMetrics) GetFullStartup() *AndroidStartupMetric_Slice {
	if x != nil {
		return x.FullStartup
	}
	return nil
}

// Next id: 8
type AndroidStartupMetric_Startup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Random id uniquely identifying an app startup in this trace.
	StartupId *uint32 `protobuf:"varint,1,opt,name=startup_id,json=startupId" json:"startup_id,omitempty"`
	// Name of the package launched
	PackageName *string `protobuf:"bytes,2,opt,name=package_name,json=packageName" json:"package_name,omitempty"`
	// Name of the process launched
	ProcessName *string `protobuf:"bytes,3,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	// Did we ask the zygote for a new process
	ZygoteNewProcess *bool `protobuf:"varint,4,opt,name=zygote_new_process,json=zygoteNewProcess" json:"zygote_new_process,omitempty"`
	// Number of processes hosting the activity involved in the launch.
	// This will usually be 1. If it is 0, it is indicative of a data / process
	// error. If > 1, the process died during startup and the system respawned
	// it.
	ActivityHostingProcessCount *uint32                            `protobuf:"varint,6,opt,name=activity_hosting_process_count,json=activityHostingProcessCount" json:"activity_hosting_process_count,omitempty"`
	ToFirstFrame                *AndroidStartupMetric_ToFirstFrame `protobuf:"bytes,5,opt,name=to_first_frame,json=toFirstFrame" json:"to_first_frame,omitempty"`
	// Details about the process (uid, version, etc)
	Process *AndroidProcessMetadata          `protobuf:"bytes,7,opt,name=process" json:"process,omitempty"`
	Hsc     *AndroidStartupMetric_HscMetrics `protobuf:"bytes,8,opt,name=hsc" json:"hsc,omitempty"`
}

func (x *AndroidStartupMetric_Startup) Reset() {
	*x = AndroidStartupMetric_Startup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidStartupMetric_Startup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidStartupMetric_Startup) ProtoMessage() {}

func (x *AndroidStartupMetric_Startup) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidStartupMetric_Startup.ProtoReflect.Descriptor instead.
func (*AndroidStartupMetric_Startup) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{16, 4}
}

func (x *AndroidStartupMetric_Startup) GetStartupId() uint32 {
	if x != nil && x.StartupId != nil {
		return *x.StartupId
	}
	return 0
}

func (x *AndroidStartupMetric_Startup) GetPackageName() string {
	if x != nil && x.PackageName != nil {
		return *x.PackageName
	}
	return ""
}

func (x *AndroidStartupMetric_Startup) GetProcessName() string {
	if x != nil && x.ProcessName != nil {
		return *x.ProcessName
	}
	return ""
}

func (x *AndroidStartupMetric_Startup) GetZygoteNewProcess() bool {
	if x != nil && x.ZygoteNewProcess != nil {
		return *x.ZygoteNewProcess
	}
	return false
}

func (x *AndroidStartupMetric_Startup) GetActivityHostingProcessCount() uint32 {
	if x != nil && x.ActivityHostingProcessCount != nil {
		return *x.ActivityHostingProcessCount
	}
	return 0
}

func (x *AndroidStartupMetric_Startup) GetToFirstFrame() *AndroidStartupMetric_ToFirstFrame {
	if x != nil {
		return x.ToFirstFrame
	}
	return nil
}

func (x *AndroidStartupMetric_Startup) GetProcess() *AndroidProcessMetadata {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *AndroidStartupMetric_Startup) GetHsc() *AndroidStartupMetric_HscMetrics {
	if x != nil {
		return x.Hsc
	}
	return nil
}

type AndroidTaskNames_Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid *int64 `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	// Process name.
	ProcessName *string `protobuf:"bytes,2,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	// Names of all threads for this process.
	ThreadName []string `protobuf:"bytes,3,rep,name=thread_name,json=threadName" json:"thread_name,omitempty"`
	// User id under which this process runs.
	Uid *int64 `protobuf:"varint,4,opt,name=uid" json:"uid,omitempty"`
	// Packages matching the process uid.
	UidPackageName []string `protobuf:"bytes,5,rep,name=uid_package_name,json=uidPackageName" json:"uid_package_name,omitempty"`
}

func (x *AndroidTaskNames_Process) Reset() {
	*x = AndroidTaskNames_Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidTaskNames_Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidTaskNames_Process) ProtoMessage() {}

func (x *AndroidTaskNames_Process) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidTaskNames_Process.ProtoReflect.Descriptor instead.
func (*AndroidTaskNames_Process) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{18, 0}
}

func (x *AndroidTaskNames_Process) GetPid() int64 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *AndroidTaskNames_Process) GetProcessName() string {
	if x != nil && x.ProcessName != nil {
		return *x.ProcessName
	}
	return ""
}

func (x *AndroidTaskNames_Process) GetThreadName() []string {
	if x != nil {
		return x.ThreadName
	}
	return nil
}

func (x *AndroidTaskNames_Process) GetUid() int64 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *AndroidTaskNames_Process) GetUidPackageName() []string {
	if x != nil {
		return x.UidPackageName
	}
	return nil
}

type AndroidThreadTimeInStateMetric_MetricsByCoreType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoreType  *string `protobuf:"bytes,1,opt,name=core_type,json=coreType" json:"core_type,omitempty"`
	RuntimeMs *int64  `protobuf:"varint,2,opt,name=runtime_ms,json=runtimeMs" json:"runtime_ms,omitempty"`
	// CPU megacycles (i.e. cycles divided by 1e6).
	Mcycles *int64 `protobuf:"varint,3,opt,name=mcycles" json:"mcycles,omitempty"`
}

func (x *AndroidThreadTimeInStateMetric_MetricsByCoreType) Reset() {
	*x = AndroidThreadTimeInStateMetric_MetricsByCoreType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidThreadTimeInStateMetric_MetricsByCoreType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidThreadTimeInStateMetric_MetricsByCoreType) ProtoMessage() {}

func (x *AndroidThreadTimeInStateMetric_MetricsByCoreType) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidThreadTimeInStateMetric_MetricsByCoreType.ProtoReflect.Descriptor instead.
func (*AndroidThreadTimeInStateMetric_MetricsByCoreType) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{19, 0}
}

func (x *AndroidThreadTimeInStateMetric_MetricsByCoreType) GetCoreType() string {
	if x != nil && x.CoreType != nil {
		return *x.CoreType
	}
	return ""
}

func (x *AndroidThreadTimeInStateMetric_MetricsByCoreType) GetRuntimeMs() int64 {
	if x != nil && x.RuntimeMs != nil {
		return *x.RuntimeMs
	}
	return 0
}

func (x *AndroidThreadTimeInStateMetric_MetricsByCoreType) GetMcycles() int64 {
	if x != nil && x.Mcycles != nil {
		return *x.Mcycles
	}
	return 0
}

type AndroidThreadTimeInStateMetric_Thread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              *string                                             `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	MainThread        *bool                                               `protobuf:"varint,3,opt,name=main_thread,json=mainThread" json:"main_thread,omitempty"`
	MetricsByCoreType []*AndroidThreadTimeInStateMetric_MetricsByCoreType `protobuf:"bytes,2,rep,name=metrics_by_core_type,json=metricsByCoreType" json:"metrics_by_core_type,omitempty"`
}

func (x *AndroidThreadTimeInStateMetric_Thread) Reset() {
	*x = AndroidThreadTimeInStateMetric_Thread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidThreadTimeInStateMetric_Thread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidThreadTimeInStateMetric_Thread) ProtoMessage() {}

func (x *AndroidThreadTimeInStateMetric_Thread) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidThreadTimeInStateMetric_Thread.ProtoReflect.Descriptor instead.
func (*AndroidThreadTimeInStateMetric_Thread) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{19, 1}
}

func (x *AndroidThreadTimeInStateMetric_Thread) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AndroidThreadTimeInStateMetric_Thread) GetMainThread() bool {
	if x != nil && x.MainThread != nil {
		return *x.MainThread
	}
	return false
}

func (x *AndroidThreadTimeInStateMetric_Thread) GetMetricsByCoreType() []*AndroidThreadTimeInStateMetric_MetricsByCoreType {
	if x != nil {
		return x.MetricsByCoreType
	}
	return nil
}

type AndroidThreadTimeInStateMetric_Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata          *AndroidProcessMetadata                             `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	MetricsByCoreType []*AndroidThreadTimeInStateMetric_MetricsByCoreType `protobuf:"bytes,2,rep,name=metrics_by_core_type,json=metricsByCoreType" json:"metrics_by_core_type,omitempty"`
	Threads           []*AndroidThreadTimeInStateMetric_Thread            `protobuf:"bytes,3,rep,name=threads" json:"threads,omitempty"`
}

func (x *AndroidThreadTimeInStateMetric_Process) Reset() {
	*x = AndroidThreadTimeInStateMetric_Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidThreadTimeInStateMetric_Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidThreadTimeInStateMetric_Process) ProtoMessage() {}

func (x *AndroidThreadTimeInStateMetric_Process) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidThreadTimeInStateMetric_Process.ProtoReflect.Descriptor instead.
func (*AndroidThreadTimeInStateMetric_Process) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{19, 2}
}

func (x *AndroidThreadTimeInStateMetric_Process) GetMetadata() *AndroidProcessMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *AndroidThreadTimeInStateMetric_Process) GetMetricsByCoreType() []*AndroidThreadTimeInStateMetric_MetricsByCoreType {
	if x != nil {
		return x.MetricsByCoreType
	}
	return nil
}

func (x *AndroidThreadTimeInStateMetric_Process) GetThreads() []*AndroidThreadTimeInStateMetric_Thread {
	if x != nil {
		return x.Threads
	}
	return nil
}

type UnmappedJavaSymbols_Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName     *string `protobuf:"bytes,1,opt,name=field_name,json=fieldName" json:"field_name,omitempty"`
	FieldTypeName *string `protobuf:"bytes,2,opt,name=field_type_name,json=fieldTypeName" json:"field_type_name,omitempty"`
}

func (x *UnmappedJavaSymbols_Field) Reset() {
	*x = UnmappedJavaSymbols_Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmappedJavaSymbols_Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmappedJavaSymbols_Field) ProtoMessage() {}

func (x *UnmappedJavaSymbols_Field) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmappedJavaSymbols_Field.ProtoReflect.Descriptor instead.
func (*UnmappedJavaSymbols_Field) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{20, 0}
}

func (x *UnmappedJavaSymbols_Field) GetFieldName() string {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return ""
}

func (x *UnmappedJavaSymbols_Field) GetFieldTypeName() string {
	if x != nil && x.FieldTypeName != nil {
		return *x.FieldTypeName
	}
	return ""
}

type UnmappedJavaSymbols_ProcessSymbols struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessMetadata *AndroidProcessMetadata      `protobuf:"bytes,1,opt,name=process_metadata,json=processMetadata" json:"process_metadata,omitempty"`
	TypeName        []string                     `protobuf:"bytes,2,rep,name=type_name,json=typeName" json:"type_name,omitempty"`
	Field           []*UnmappedJavaSymbols_Field `protobuf:"bytes,4,rep,name=field" json:"field,omitempty"`
}

func (x *UnmappedJavaSymbols_ProcessSymbols) Reset() {
	*x = UnmappedJavaSymbols_ProcessSymbols{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmappedJavaSymbols_ProcessSymbols) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmappedJavaSymbols_ProcessSymbols) ProtoMessage() {}

func (x *UnmappedJavaSymbols_ProcessSymbols) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmappedJavaSymbols_ProcessSymbols.ProtoReflect.Descriptor instead.
func (*UnmappedJavaSymbols_ProcessSymbols) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{20, 1}
}

func (x *UnmappedJavaSymbols_ProcessSymbols) GetProcessMetadata() *AndroidProcessMetadata {
	if x != nil {
		return x.ProcessMetadata
	}
	return nil
}

func (x *UnmappedJavaSymbols_ProcessSymbols) GetTypeName() []string {
	if x != nil {
		return x.TypeName
	}
	return nil
}

func (x *UnmappedJavaSymbols_ProcessSymbols) GetField() []*UnmappedJavaSymbols_Field {
	if x != nil {
		return x.Field
	}
	return nil
}

type UnsymbolizedFrames_Frame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module  *string `protobuf:"bytes,1,opt,name=module" json:"module,omitempty"`
	BuildId *string `protobuf:"bytes,2,opt,name=build_id,json=buildId" json:"build_id,omitempty"`
	Address *int64  `protobuf:"varint,3,opt,name=address" json:"address,omitempty"`
}

func (x *UnsymbolizedFrames_Frame) Reset() {
	*x = UnsymbolizedFrames_Frame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsymbolizedFrames_Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsymbolizedFrames_Frame) ProtoMessage() {}

func (x *UnsymbolizedFrames_Frame) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsymbolizedFrames_Frame.ProtoReflect.Descriptor instead.
func (*UnsymbolizedFrames_Frame) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{21, 0}
}

func (x *UnsymbolizedFrames_Frame) GetModule() string {
	if x != nil && x.Module != nil {
		return *x.Module
	}
	return ""
}

func (x *UnsymbolizedFrames_Frame) GetBuildId() string {
	if x != nil && x.BuildId != nil {
		return *x.BuildId
	}
	return ""
}

func (x *UnsymbolizedFrames_Frame) GetAddress() int64 {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return 0
}

type TraceMetadata_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Idx   *uint32 `protobuf:"varint,2,opt,name=idx" json:"idx,omitempty"`
	Value *int64  `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
}

func (x *TraceMetadata_Entry) Reset() {
	*x = TraceMetadata_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceMetadata_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceMetadata_Entry) ProtoMessage() {}

func (x *TraceMetadata_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceMetadata_Entry.ProtoReflect.Descriptor instead.
func (*TraceMetadata_Entry) Descriptor() ([]byte, []int) {
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP(), []int{22, 0}
}

func (x *TraceMetadata_Entry) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TraceMetadata_Entry) GetIdx() uint32 {
	if x != nil && x.Idx != nil {
		return *x.Idx
	}
	return 0
}

func (x *TraceMetadata_Entry) GetValue() int64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

var File_perfetto_metrics_perfetto_merged_metrics_proto protoreflect.FileDescriptor

var file_perfetto_metrics_perfetto_merged_metrics_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0f, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x22, 0x84, 0x05, 0x0a, 0x14, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x42, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x60, 0x0a, 0x10, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x42, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0f, 0x62, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x66, 0x0a, 0x12,
	0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x11, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x73, 0x1a, 0xd2, 0x01, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x61,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x55, 0x61, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x75, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x55, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x76, 0x67, 0x5f, 0x75, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x67, 0x55, 0x61, 0x1a, 0xcc, 0x01, 0x0a, 0x11, 0x42, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f,
	0x6f, 0x66, 0x66, 0x5f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x4e, 0x73, 0x12, 0x2b,
	0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6f,
	0x6e, 0x5f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4f, 0x6e, 0x4e, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x64, 0x6f, 0x7a, 0x65,
	0x5f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x44, 0x6f, 0x7a, 0x65, 0x4e, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x6b, 0x65, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x61,
	0x6b, 0x65, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x73, 0x22, 0x8e, 0x08, 0x0a, 0x10, 0x41, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x43, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x4c, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x43, 0x70, 0x75,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xa8, 0x01, 0x0a, 0x07,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4e, 0x73,
	0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x5f, 0x6b, 0x68, 0x7a,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x4b,
	0x68, 0x7a, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x5f, 0x6b,
	0x68, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x46, 0x72, 0x65,
	0x71, 0x4b, 0x68, 0x7a, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x76, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x5f, 0x6b, 0x68, 0x7a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x76, 0x67, 0x46,
	0x72, 0x65, 0x71, 0x4b, 0x68, 0x7a, 0x1a, 0x65, 0x0a, 0x08, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x43, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x43, 0x70, 0x75,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x06, 0x1a, 0x67, 0x0a,
	0x0c, 0x43, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x43, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x43, 0x70, 0x75, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0xf4, 0x01, 0x0a, 0x06, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x43, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3e, 0x0a, 0x04, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x43, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x43, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x43, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x63,
	0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x1a, 0xb9, 0x02,
	0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x43, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x43, 0x70, 0x75,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x07, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x43, 0x70,
	0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x43, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x72,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x63, 0x6f, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x85, 0x01, 0x0a, 0x15, 0x41, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x6c, 0x6f,
	0x67, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x4c, 0x6f, 0x67, 0x67, 0x65,
	0x64, 0x22, 0xf4, 0x02, 0x0a, 0x16, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x49, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x59, 0x0a,
	0x10, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x69, 0x64, 0x1a, 0x76, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x6b, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x61, 0x70, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65,
	0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05,
	0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0xe1, 0x07, 0x0a, 0x14, 0x48, 0x65, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x74, 0x65,
	0x73, 0x12, 0x5a, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x74, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x3e, 0x0a,
	0x05, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x8e, 0x01,
	0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0xa6,
	0x02, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x41, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x48, 0x65, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x65, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x74, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x73, 0x1a, 0xf2, 0x02, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x4c, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x69, 0x74, 0x65, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x3b, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x73, 0x73, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x41, 0x6e, 0x6f, 0x6e, 0x52, 0x73, 0x73,
	0x41, 0x6e, 0x64, 0x53, 0x77, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xe3, 0x0d, 0x0a,
	0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0e, 0x72, 0x74, 0x5f, 0x63, 0x70, 0x75, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72,
	0x74, 0x43, 0x70, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x72, 0x61, 0x77, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x72,
	0x61, 0x77, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x64, 0x72, 0x61, 0x77, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x69, 0x6e,
	0x12, 0x24, 0x0a, 0x0e, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x61,
	0x76, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x64, 0x72, 0x61, 0x77, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x41, 0x76, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x6c, 0x75,
	0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x75, 0x73, 0x68,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x6c, 0x75, 0x73,
	0x68, 0x4d, 0x61, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x4d, 0x69,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x41, 0x76, 0x67, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x54, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4d, 0x69, 0x6e,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65,
	0x5f, 0x61, 0x76, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x54, 0x72, 0x65, 0x65, 0x41, 0x76, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x70,
	0x75, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x67, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x70,
	0x75, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x70, 0x75, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x76, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x69, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x75, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0d, 0x75, 0x69, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d,
	0x61, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x69, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x6d, 0x69, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x69, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x4d, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x69, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75,
	0x69, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x76, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x68,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x61, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x5f, 0x61,
	0x76, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x41, 0x76, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x48, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x41, 0x76, 0x67, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x69, 0x73,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x6d, 0x69, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x61, 0x76, 0x67,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x69, 0x73,
	0x73, 0x41, 0x76, 0x67, 0x12, 0x2f, 0x0a, 0x14, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73,
	0x5f, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x43, 0x70, 0x75, 0x4d,
	0x65, 0x6d, 0x4d, 0x61, 0x78, 0x12, 0x2f, 0x0a, 0x14, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x73, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x43, 0x70, 0x75,
	0x4d, 0x65, 0x6d, 0x4d, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x63, 0x73, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x43, 0x70,
	0x75, 0x4d, 0x65, 0x6d, 0x41, 0x76, 0x67, 0x12, 0x2f, 0x0a, 0x14, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x73, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x78, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x47,
	0x70, 0x75, 0x4d, 0x65, 0x6d, 0x4d, 0x61, 0x78, 0x12, 0x2f, 0x0a, 0x14, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x73, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x6d, 0x69, 0x6e,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73,
	0x47, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x4d, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x73, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x61, 0x76,
	0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x73, 0x47, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x41, 0x76, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x65,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x4d,
	0x61, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65,
	0x6d, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x65, 0x78,
	0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x65,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x41,
	0x76, 0x67, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x4d,
	0x61, 0x78, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x4d,
	0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x61, 0x76,
	0x67, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x41,
	0x76, 0x67, 0x22, 0x5a, 0x0a, 0x11, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x48, 0x77, 0x75,
	0x69, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9a,
	0x02, 0x0a, 0x10, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x49, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x40, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x49, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x06, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x1a, 0xc3, 0x01, 0x0a, 0x06, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x76, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x76,
	0x67, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a,
	0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xf8, 0x03, 0x0a, 0x11,
	0x4a, 0x61, 0x76, 0x61, 0x48, 0x65, 0x61, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x12, 0x57, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4a, 0x61, 0x76, 0x61,
	0x48, 0x65, 0x61, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x75, 0x0a, 0x09, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f,
	0x62, 0x6a, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x65, 0x0a, 0x06, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x4a, 0x61, 0x76, 0x61, 0x48, 0x65, 0x61, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x74,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xab, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x70,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x70, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4a, 0x61, 0x76, 0x61, 0x48, 0x65, 0x61, 0x70, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x9b, 0x05, 0x0a, 0x0d, 0x4a, 0x61, 0x76, 0x61, 0x48,
	0x65, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x4a, 0x61, 0x76, 0x61, 0x48, 0x65, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x62, 0x0a,
	0x09, 0x48, 0x65, 0x61, 0x70, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f,
	0x6f, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x6f, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0xa6, 0x02, 0x0a, 0x06, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x68, 0x65, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x68, 0x65, 0x61, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x62,
	0x6a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x65,
	0x61, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x62,
	0x6a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x16, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x72,
	0x73, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x6e, 0x6f, 0x6e, 0x52, 0x73, 0x73, 0x41,
	0x6e, 0x64, 0x53, 0x77, 0x61, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x72, 0x6f,
	0x6f, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4a, 0x61, 0x76, 0x61,
	0x48, 0x65, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x70, 0x52, 0x6f,
	0x6f, 0x74, 0x73, 0x52, 0x05, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x1a, 0xa7, 0x01, 0x0a, 0x0d, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x70, 0x69, 0x64,
	0x12, 0x41, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4a, 0x61, 0x76, 0x61, 0x48, 0x65, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x10, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x4c, 0x6d, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x0c, 0x62, 0x79,
	0x5f, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x6d, 0x6b, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2e, 0x42, 0x79, 0x4f, 0x6f, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x0a,
	0x62, 0x79, 0x4f, 0x6f, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x6f,
	0x6d, 0x5f, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x6f, 0x6d, 0x56, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x46, 0x0a, 0x0a, 0x42, 0x79, 0x4f, 0x6f, 0x6d, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x61, 0x64, 0x6a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x6f, 0x6d, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x41, 0x64, 0x6a, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc7, 0x04, 0x0a,
	0x16, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x6d, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x3f, 0x0a, 0x04, 0x6c, 0x6d, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c,
	0x6d, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4c,
	0x6d, 0x6b, 0x52, 0x04, 0x6c, 0x6d, 0x6b, 0x73, 0x1a, 0x97, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x6f, 0x6d, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x6a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6f, 0x6f, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x6a, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x73, 0x73,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x73,
	0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61,
	0x6e, 0x6f, 0x6e, 0x52, 0x73, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x68, 0x6d, 0x65, 0x6d, 0x5f, 0x72, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x68, 0x6d, 0x65, 0x6d, 0x52, 0x73, 0x73, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x77, 0x61, 0x70, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x1a, 0xd1, 0x01, 0x0a, 0x03, 0x4c, 0x6d, 0x6b, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x6f,
	0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x6a, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6f, 0x6f, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x6a, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x70,
	0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6f, 0x6e, 0x48,
	0x65, 0x61, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x4c, 0x6d, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xc9, 0x07, 0x0a, 0x13, 0x41, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x5c,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0xfd, 0x01, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x61, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x65, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x87, 0x01, 0x0a,
	0x11, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x56,
	0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x88, 0x03, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x47, 0x0a, 0x08, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x07, 0x61, 0x6e, 0x6f, 0x6e, 0x52, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x72, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x73, 0x73, 0x12, 0x40, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x04,
	0x73, 0x77, 0x61, 0x70, 0x12, 0x50, 0x0a, 0x0d, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x73, 0x77, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x61, 0x6e, 0x6f, 0x6e, 0x41,
	0x6e, 0x64, 0x53, 0x77, 0x61, 0x70, 0x12, 0x49, 0x0a, 0x09, 0x6a, 0x61, 0x76, 0x61, 0x5f, 0x68,
	0x65, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x08, 0x6a, 0x61, 0x76, 0x61, 0x48, 0x65, 0x61,
	0x70, 0x1a, 0x3f, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x61,
	0x76, 0x67, 0x22, 0xd4, 0x05, 0x0a, 0x1f, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x65, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x97, 0x01,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x63, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x09, 0x6d, 0x65,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0xe3, 0x02, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x51, 0x0a, 0x08, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x55, 0x6e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x61, 0x6e, 0x6f, 0x6e, 0x52,
	0x73, 0x73, 0x12, 0x51, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x73, 0x73, 0x12, 0x4a, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x55, 0x6e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x77, 0x61,
	0x70, 0x12, 0x5a, 0x0a, 0x0d, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x77,
	0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x61, 0x6e, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x53, 0x77, 0x61, 0x70, 0x1a, 0x4a, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x6f, 0x6d, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x12, 0x41, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x47, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52,
	0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x61, 0x0a, 0x07, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa5, 0x02, 0x0a,
	0x11, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x61, 0x69,
	0x6c, 0x73, 0x1a, 0x4e, 0x0a, 0x0a, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x4d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x75, 0x77,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x55,
	0x77, 0x73, 0x1a, 0x70, 0x0a, 0x0a, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x9f, 0x12, 0x0a, 0x14, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x47, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x1a, 0xe0, 0x01, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x24, 0x0a,
	0x0e, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x75, 0x72, 0x5f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x75,
	0x72, 0x4e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x64, 0x75, 0x72, 0x5f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x75,
	0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x4e, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x75,
	0x6e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x6c, 0x65, 0x65, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x5f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x19, 0x75, 0x6e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x62,
	0x6c, 0x65, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x44, 0x75, 0x72, 0x4e, 0x73, 0x12, 0x3b, 0x0a, 0x1a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6c,
	0x65, 0x65, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x5f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x53,
	0x6c, 0x65, 0x65, 0x70, 0x44, 0x75, 0x72, 0x4e, 0x73, 0x1a, 0x35, 0x0a, 0x05, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x75, 0x72, 0x5f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x64, 0x75, 0x72, 0x4e, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x75, 0x72,
	0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x64, 0x75, 0x72, 0x4d, 0x73,
	0x1a, 0x80, 0x0b, 0x0a, 0x0c, 0x54, 0x6f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x75, 0x72, 0x5f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x64, 0x75, 0x72, 0x4e, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x75, 0x72, 0x5f,
	0x6d, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x64, 0x75, 0x72, 0x4d, 0x73, 0x12,
	0x72, 0x0a, 0x19, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62,
	0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x15, 0x6d, 0x61,
	0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x66, 0x0a, 0x19, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x69, 0x6e, 0x12,
	0x5f, 0x0a, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x13, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5b, 0x0a, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x5d, 0x0a,
	0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x12,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x72, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x68, 0x6f, 0x72, 0x65,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x65, 0x72, 0x12, 0x66, 0x0a, 0x19, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x66, 0x0a, 0x19, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x52, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x74, 0x6f, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x74, 0x6f, 0x50,
	0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6b, 0x12, 0x62, 0x0a, 0x17, 0x74, 0x6f, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x14, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x5b, 0x0a, 0x13, 0x74,
	0x6f, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x11, 0x74, 0x6f, 0x42, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75,
	0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x74,
	0x69, 0x6d, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6b, 0x4a, 0x04, 0x08, 0x0c, 0x10,
	0x0d, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04, 0x08,
	0x0f, 0x10, 0x10, 0x1a, 0x5c, 0x0a, 0x0a, 0x48, 0x73, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x53,
	0x6c, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75,
	0x70, 0x1a, 0xc2, 0x03, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x7a, 0x79, 0x67, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x77,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x7a, 0x79, 0x67, 0x6f, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x43, 0x0a, 0x1e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0e, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2e, 0x54, 0x6f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x52, 0x0c, 0x74, 0x6f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12,
	0x41, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x42, 0x0a, 0x03, 0x68, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x48, 0x73, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x03, 0x68, 0x73, 0x63, 0x22, 0x9a, 0x01, 0x0a, 0x1b, 0x41, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x66, 0x6c, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d,
	0x69, 0x73, 0x73, 0x65, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d,
	0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x68, 0x77, 0x63, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x48, 0x77,
	0x63, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x73, 0x73, 0x65,
	0x64, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x47, 0x70, 0x75, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x10, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x9b, 0x01,
	0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x69, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xad, 0x05, 0x0a, 0x1e,
	0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x55,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x69, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x42, 0x79, 0x43, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73,
	0x1a, 0xb1, 0x01, 0x0a, 0x06, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x12, 0x72, 0x0a, 0x14, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x11, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x1a, 0x94, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x43, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x72, 0x0a, 0x14, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x79, 0x43, 0x6f,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42,
	0x79, 0x43, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x22, 0x8f, 0x03, 0x0a, 0x13,
	0x55, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4a, 0x61, 0x76, 0x61, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x12, 0x5c, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55,
	0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4a, 0x61, 0x76, 0x61, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x73, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x73, 0x1a, 0x4e, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0xc9, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4a,
	0x61, 0x76, 0x61, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xad, 0x01,
	0x0a, 0x12, 0x55, 0x6e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x6e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52,
	0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x54, 0x0a, 0x05, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xf7, 0x03,
	0x0a, 0x0d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x50, 0x0a, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x19,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x66, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x21, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x64, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0x43, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfa, 0x0d, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0b, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x42, 0x61,
	0x74, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x63, 0x70,
	0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x43, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0a, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x43, 0x70, 0x75, 0x12, 0x45, 0x0a, 0x0b, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x0a, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4d, 0x65, 0x6d, 0x12, 0x5c, 0x0a,
	0x11, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x75, 0x6e, 0x61,
	0x67, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0f, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x4d, 0x65, 0x6d, 0x55, 0x6e, 0x61, 0x67, 0x67, 0x12, 0x55, 0x0a, 0x14, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x12,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x49, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0a, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x49, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x5f, 0x6c, 0x6d, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x6d, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0a,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x6d, 0x6b, 0x12, 0x4d, 0x0a, 0x10, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x70, 0x6f, 0x77, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x50, 0x6f, 0x77, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x12, 0x5b, 0x0a, 0x16, 0x68, 0x65, 0x61,
	0x70, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69,
	0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x74, 0x65, 0x73,
	0x52, 0x14, 0x68, 0x65, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a,
	0x13, 0x75, 0x6e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x6e, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x12, 0x75, 0x6e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x6a, 0x61, 0x76, 0x61, 0x5f, 0x68, 0x65, 0x61, 0x70,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4a,
	0x61, 0x76, 0x61, 0x48, 0x65, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x6a, 0x61,
	0x76, 0x61, 0x48, 0x65, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x13, 0x6a,
	0x61, 0x76, 0x61, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4a, 0x61, 0x76, 0x61, 0x48,
	0x65, 0x61, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x11, 0x6a, 0x61,
	0x76, 0x61, 0x48, 0x65, 0x61, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12,
	0x55, 0x0a, 0x12, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x6c, 0x6d, 0x6b, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x6d, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x10, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x6d, 0x6b,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x15, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x5f, 0x6a, 0x61, 0x76, 0x61, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x4a, 0x61, 0x76, 0x61, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x13, 0x75, 0x6e, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x4a, 0x61, 0x76, 0x61, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73,
	0x12, 0x52, 0x0a, 0x13, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x68, 0x77, 0x75, 0x69,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x48, 0x77, 0x75, 0x69, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x11, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x48, 0x77, 0x75, 0x69, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x4f, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4f, 0x0a, 0x12, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x52, 0x10, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x6f, 0x0a, 0x1c, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x18, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x16, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x5f, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x66, 0x6c, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x66, 0x6c, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x15, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x53, 0x75,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x66, 0x6c, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x2a, 0x06, 0x08, 0xc2,
	0x03, 0x10, 0xf4, 0x03, 0x2a, 0x06, 0x08, 0xf4, 0x03, 0x10, 0xe9, 0x07, 0x4a, 0x04, 0x08, 0x04,
	0x10, 0x05, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x4a, 0x04,
	0x08, 0x0e, 0x10, 0x0f, 0x42, 0x09, 0x5a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
}

var (
	file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescOnce sync.Once
	file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescData = file_perfetto_metrics_perfetto_merged_metrics_proto_rawDesc
)

func file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescGZIP() []byte {
	file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescOnce.Do(func() {
		file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescData)
	})
	return file_perfetto_metrics_perfetto_merged_metrics_proto_rawDescData
}

var file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 69)
var file_perfetto_metrics_perfetto_merged_metrics_proto_goTypes = []interface{}{
	(*AndroidBatteryMetric)(nil),                                // 0: perfetto.protos.AndroidBatteryMetric
	(*AndroidCpuMetric)(nil),                                    // 1: perfetto.protos.AndroidCpuMetric
	(*AndroidDisplayMetrics)(nil),                               // 2: perfetto.protos.AndroidDisplayMetrics
	(*AndroidProcessMetadata)(nil),                              // 3: perfetto.protos.AndroidProcessMetadata
	(*HeapProfileCallsites)(nil),                                // 4: perfetto.protos.HeapProfileCallsites
	(*ProcessRenderInfo)(nil),                                   // 5: perfetto.protos.ProcessRenderInfo
	(*AndroidHwuiMetric)(nil),                                   // 6: perfetto.protos.AndroidHwuiMetric
	(*AndroidIonMetric)(nil),                                    // 7: perfetto.protos.AndroidIonMetric
	(*JavaHeapHistogram)(nil),                                   // 8: perfetto.protos.JavaHeapHistogram
	(*JavaHeapStats)(nil),                                       // 9: perfetto.protos.JavaHeapStats
	(*AndroidLmkMetric)(nil),                                    // 10: perfetto.protos.AndroidLmkMetric
	(*AndroidLmkReasonMetric)(nil),                              // 11: perfetto.protos.AndroidLmkReasonMetric
	(*AndroidMemoryMetric)(nil),                                 // 12: perfetto.protos.AndroidMemoryMetric
	(*AndroidMemoryUnaggregatedMetric)(nil),                     // 13: perfetto.protos.AndroidMemoryUnaggregatedMetric
	(*AndroidPackageList)(nil),                                  // 14: perfetto.protos.AndroidPackageList
	(*AndroidPowerRails)(nil),                                   // 15: perfetto.protos.AndroidPowerRails
	(*AndroidStartupMetric)(nil),                                // 16: perfetto.protos.AndroidStartupMetric
	(*AndroidSurfaceflingerMetric)(nil),                         // 17: perfetto.protos.AndroidSurfaceflingerMetric
	(*AndroidTaskNames)(nil),                                    // 18: perfetto.protos.AndroidTaskNames
	(*AndroidThreadTimeInStateMetric)(nil),                      // 19: perfetto.protos.AndroidThreadTimeInStateMetric
	(*UnmappedJavaSymbols)(nil),                                 // 20: perfetto.protos.UnmappedJavaSymbols
	(*UnsymbolizedFrames)(nil),                                  // 21: perfetto.protos.UnsymbolizedFrames
	(*TraceMetadata)(nil),                                       // 22: perfetto.protos.TraceMetadata
	(*TraceMetrics)(nil),                                        // 23: perfetto.protos.TraceMetrics
	(*AndroidBatteryMetric_BatteryCounters)(nil),                // 24: perfetto.protos.AndroidBatteryMetric.BatteryCounters
	(*AndroidBatteryMetric_BatteryAggregates)(nil),              // 25: perfetto.protos.AndroidBatteryMetric.BatteryAggregates
	(*AndroidCpuMetric_Metrics)(nil),                            // 26: perfetto.protos.AndroidCpuMetric.Metrics
	(*AndroidCpuMetric_CoreData)(nil),                           // 27: perfetto.protos.AndroidCpuMetric.CoreData
	(*AndroidCpuMetric_CoreTypeData)(nil),                       // 28: perfetto.protos.AndroidCpuMetric.CoreTypeData
	(*AndroidCpuMetric_Thread)(nil),                             // 29: perfetto.protos.AndroidCpuMetric.Thread
	(*AndroidCpuMetric_Process)(nil),                            // 30: perfetto.protos.AndroidCpuMetric.Process
	(*AndroidProcessMetadata_Package)(nil),                      // 31: perfetto.protos.AndroidProcessMetadata.Package
	(*HeapProfileCallsites_Frame)(nil),                          // 32: perfetto.protos.HeapProfileCallsites.Frame
	(*HeapProfileCallsites_Counters)(nil),                       // 33: perfetto.protos.HeapProfileCallsites.Counters
	(*HeapProfileCallsites_Callsite)(nil),                       // 34: perfetto.protos.HeapProfileCallsites.Callsite
	(*HeapProfileCallsites_InstanceStats)(nil),                  // 35: perfetto.protos.HeapProfileCallsites.InstanceStats
	(*AndroidIonMetric_Buffer)(nil),                             // 36: perfetto.protos.AndroidIonMetric.Buffer
	(*JavaHeapHistogram_TypeCount)(nil),                         // 37: perfetto.protos.JavaHeapHistogram.TypeCount
	(*JavaHeapHistogram_Sample)(nil),                            // 38: perfetto.protos.JavaHeapHistogram.Sample
	(*JavaHeapHistogram_InstanceStats)(nil),                     // 39: perfetto.protos.JavaHeapHistogram.InstanceStats
	(*JavaHeapStats_HeapRoots)(nil),                             // 40: perfetto.protos.JavaHeapStats.HeapRoots
	(*JavaHeapStats_Sample)(nil),                                // 41: perfetto.protos.JavaHeapStats.Sample
	(*JavaHeapStats_InstanceStats)(nil),                         // 42: perfetto.protos.JavaHeapStats.InstanceStats
	(*AndroidLmkMetric_ByOomScore)(nil),                         // 43: perfetto.protos.AndroidLmkMetric.ByOomScore
	(*AndroidLmkReasonMetric_Process)(nil),                      // 44: perfetto.protos.AndroidLmkReasonMetric.Process
	(*AndroidLmkReasonMetric_Lmk)(nil),                          // 45: perfetto.protos.AndroidLmkReasonMetric.Lmk
	(*AndroidMemoryMetric_ProcessMetrics)(nil),                  // 46: perfetto.protos.AndroidMemoryMetric.ProcessMetrics
	(*AndroidMemoryMetric_PriorityBreakdown)(nil),               // 47: perfetto.protos.AndroidMemoryMetric.PriorityBreakdown
	(*AndroidMemoryMetric_ProcessMemoryCounters)(nil),           // 48: perfetto.protos.AndroidMemoryMetric.ProcessMemoryCounters
	(*AndroidMemoryMetric_Counter)(nil),                         // 49: perfetto.protos.AndroidMemoryMetric.Counter
	(*AndroidMemoryUnaggregatedMetric_ProcessValues)(nil),       // 50: perfetto.protos.AndroidMemoryUnaggregatedMetric.ProcessValues
	(*AndroidMemoryUnaggregatedMetric_ProcessMemoryValues)(nil), // 51: perfetto.protos.AndroidMemoryUnaggregatedMetric.ProcessMemoryValues
	(*AndroidMemoryUnaggregatedMetric_Value)(nil),               // 52: perfetto.protos.AndroidMemoryUnaggregatedMetric.Value
	(*AndroidPackageList_Package)(nil),                          // 53: perfetto.protos.AndroidPackageList.Package
	(*AndroidPowerRails_EnergyData)(nil),                        // 54: perfetto.protos.AndroidPowerRails.EnergyData
	(*AndroidPowerRails_PowerRails)(nil),                        // 55: perfetto.protos.AndroidPowerRails.PowerRails
	(*AndroidStartupMetric_TaskStateBreakdown)(nil),             // 56: perfetto.protos.AndroidStartupMetric.TaskStateBreakdown
	(*AndroidStartupMetric_Slice)(nil),                          // 57: perfetto.protos.AndroidStartupMetric.Slice
	(*AndroidStartupMetric_ToFirstFrame)(nil),                   // 58: perfetto.protos.AndroidStartupMetric.ToFirstFrame
	(*AndroidStartupMetric_HscMetrics)(nil),                     // 59: perfetto.protos.AndroidStartupMetric.HscMetrics
	(*AndroidStartupMetric_Startup)(nil),                        // 60: perfetto.protos.AndroidStartupMetric.Startup
	(*AndroidTaskNames_Process)(nil),                            // 61: perfetto.protos.AndroidTaskNames.Process
	(*AndroidThreadTimeInStateMetric_MetricsByCoreType)(nil),    // 62: perfetto.protos.AndroidThreadTimeInStateMetric.MetricsByCoreType
	(*AndroidThreadTimeInStateMetric_Thread)(nil),               // 63: perfetto.protos.AndroidThreadTimeInStateMetric.Thread
	(*AndroidThreadTimeInStateMetric_Process)(nil),              // 64: perfetto.protos.AndroidThreadTimeInStateMetric.Process
	(*UnmappedJavaSymbols_Field)(nil),                           // 65: perfetto.protos.UnmappedJavaSymbols.Field
	(*UnmappedJavaSymbols_ProcessSymbols)(nil),                  // 66: perfetto.protos.UnmappedJavaSymbols.ProcessSymbols
	(*UnsymbolizedFrames_Frame)(nil),                            // 67: perfetto.protos.UnsymbolizedFrames.Frame
	(*TraceMetadata_Entry)(nil),                                 // 68: perfetto.protos.TraceMetadata.Entry
}
var file_perfetto_metrics_perfetto_merged_metrics_proto_depIdxs = []int32{
	24,  // 0: perfetto.protos.AndroidBatteryMetric.battery_counters:type_name -> perfetto.protos.AndroidBatteryMetric.BatteryCounters
	25,  // 1: perfetto.protos.AndroidBatteryMetric.battery_aggregates:type_name -> perfetto.protos.AndroidBatteryMetric.BatteryAggregates
	30,  // 2: perfetto.protos.AndroidCpuMetric.process_info:type_name -> perfetto.protos.AndroidCpuMetric.Process
	31,  // 3: perfetto.protos.AndroidProcessMetadata.package:type_name -> perfetto.protos.AndroidProcessMetadata.Package
	31,  // 4: perfetto.protos.AndroidProcessMetadata.packages_for_uid:type_name -> perfetto.protos.AndroidProcessMetadata.Package
	35,  // 5: perfetto.protos.HeapProfileCallsites.instance_stats:type_name -> perfetto.protos.HeapProfileCallsites.InstanceStats
	5,   // 6: perfetto.protos.AndroidHwuiMetric.process_info:type_name -> perfetto.protos.ProcessRenderInfo
	36,  // 7: perfetto.protos.AndroidIonMetric.buffer:type_name -> perfetto.protos.AndroidIonMetric.Buffer
	39,  // 8: perfetto.protos.JavaHeapHistogram.instance_stats:type_name -> perfetto.protos.JavaHeapHistogram.InstanceStats
	42,  // 9: perfetto.protos.JavaHeapStats.instance_stats:type_name -> perfetto.protos.JavaHeapStats.InstanceStats
	43,  // 10: perfetto.protos.AndroidLmkMetric.by_oom_score:type_name -> perfetto.protos.AndroidLmkMetric.ByOomScore
	45,  // 11: perfetto.protos.AndroidLmkReasonMetric.lmks:type_name -> perfetto.protos.AndroidLmkReasonMetric.Lmk
	46,  // 12: perfetto.protos.AndroidMemoryMetric.process_metrics:type_name -> perfetto.protos.AndroidMemoryMetric.ProcessMetrics
	50,  // 13: perfetto.protos.AndroidMemoryUnaggregatedMetric.process_values:type_name -> perfetto.protos.AndroidMemoryUnaggregatedMetric.ProcessValues
	53,  // 14: perfetto.protos.AndroidPackageList.packages:type_name -> perfetto.protos.AndroidPackageList.Package
	55,  // 15: perfetto.protos.AndroidPowerRails.power_rails:type_name -> perfetto.protos.AndroidPowerRails.PowerRails
	60,  // 16: perfetto.protos.AndroidStartupMetric.startup:type_name -> perfetto.protos.AndroidStartupMetric.Startup
	61,  // 17: perfetto.protos.AndroidTaskNames.process:type_name -> perfetto.protos.AndroidTaskNames.Process
	64,  // 18: perfetto.protos.AndroidThreadTimeInStateMetric.processes:type_name -> perfetto.protos.AndroidThreadTimeInStateMetric.Process
	66,  // 19: perfetto.protos.UnmappedJavaSymbols.process_symbols:type_name -> perfetto.protos.UnmappedJavaSymbols.ProcessSymbols
	67,  // 20: perfetto.protos.UnsymbolizedFrames.frames:type_name -> perfetto.protos.UnsymbolizedFrames.Frame
	68,  // 21: perfetto.protos.TraceMetadata.error_stats_entry:type_name -> perfetto.protos.TraceMetadata.Entry
	0,   // 22: perfetto.protos.TraceMetrics.android_batt:type_name -> perfetto.protos.AndroidBatteryMetric
	1,   // 23: perfetto.protos.TraceMetrics.android_cpu:type_name -> perfetto.protos.AndroidCpuMetric
	12,  // 24: perfetto.protos.TraceMetrics.android_mem:type_name -> perfetto.protos.AndroidMemoryMetric
	13,  // 25: perfetto.protos.TraceMetrics.android_mem_unagg:type_name -> perfetto.protos.AndroidMemoryUnaggregatedMetric
	14,  // 26: perfetto.protos.TraceMetrics.android_package_list:type_name -> perfetto.protos.AndroidPackageList
	7,   // 27: perfetto.protos.TraceMetrics.android_ion:type_name -> perfetto.protos.AndroidIonMetric
	10,  // 28: perfetto.protos.TraceMetrics.android_lmk:type_name -> perfetto.protos.AndroidLmkMetric
	15,  // 29: perfetto.protos.TraceMetrics.android_powrails:type_name -> perfetto.protos.AndroidPowerRails
	16,  // 30: perfetto.protos.TraceMetrics.android_startup:type_name -> perfetto.protos.AndroidStartupMetric
	4,   // 31: perfetto.protos.TraceMetrics.heap_profile_callsites:type_name -> perfetto.protos.HeapProfileCallsites
	22,  // 32: perfetto.protos.TraceMetrics.trace_metadata:type_name -> perfetto.protos.TraceMetadata
	21,  // 33: perfetto.protos.TraceMetrics.unsymbolized_frames:type_name -> perfetto.protos.UnsymbolizedFrames
	9,   // 34: perfetto.protos.TraceMetrics.java_heap_stats:type_name -> perfetto.protos.JavaHeapStats
	8,   // 35: perfetto.protos.TraceMetrics.java_heap_histogram:type_name -> perfetto.protos.JavaHeapHistogram
	11,  // 36: perfetto.protos.TraceMetrics.android_lmk_reason:type_name -> perfetto.protos.AndroidLmkReasonMetric
	20,  // 37: perfetto.protos.TraceMetrics.unmapped_java_symbols:type_name -> perfetto.protos.UnmappedJavaSymbols
	6,   // 38: perfetto.protos.TraceMetrics.android_hwui_metric:type_name -> perfetto.protos.AndroidHwuiMetric
	2,   // 39: perfetto.protos.TraceMetrics.display_metrics:type_name -> perfetto.protos.AndroidDisplayMetrics
	18,  // 40: perfetto.protos.TraceMetrics.android_task_names:type_name -> perfetto.protos.AndroidTaskNames
	19,  // 41: perfetto.protos.TraceMetrics.android_thread_time_in_state:type_name -> perfetto.protos.AndroidThreadTimeInStateMetric
	17,  // 42: perfetto.protos.TraceMetrics.android_surfaceflinger:type_name -> perfetto.protos.AndroidSurfaceflingerMetric
	26,  // 43: perfetto.protos.AndroidCpuMetric.CoreData.metrics:type_name -> perfetto.protos.AndroidCpuMetric.Metrics
	26,  // 44: perfetto.protos.AndroidCpuMetric.CoreTypeData.metrics:type_name -> perfetto.protos.AndroidCpuMetric.Metrics
	26,  // 45: perfetto.protos.AndroidCpuMetric.Thread.metrics:type_name -> perfetto.protos.AndroidCpuMetric.Metrics
	27,  // 46: perfetto.protos.AndroidCpuMetric.Thread.core:type_name -> perfetto.protos.AndroidCpuMetric.CoreData
	28,  // 47: perfetto.protos.AndroidCpuMetric.Thread.core_type:type_name -> perfetto.protos.AndroidCpuMetric.CoreTypeData
	26,  // 48: perfetto.protos.AndroidCpuMetric.Process.metrics:type_name -> perfetto.protos.AndroidCpuMetric.Metrics
	29,  // 49: perfetto.protos.AndroidCpuMetric.Process.threads:type_name -> perfetto.protos.AndroidCpuMetric.Thread
	27,  // 50: perfetto.protos.AndroidCpuMetric.Process.core:type_name -> perfetto.protos.AndroidCpuMetric.CoreData
	28,  // 51: perfetto.protos.AndroidCpuMetric.Process.core_type:type_name -> perfetto.protos.AndroidCpuMetric.CoreTypeData
	32,  // 52: perfetto.protos.HeapProfileCallsites.Callsite.frame:type_name -> perfetto.protos.HeapProfileCallsites.Frame
	33,  // 53: perfetto.protos.HeapProfileCallsites.Callsite.self_allocs:type_name -> perfetto.protos.HeapProfileCallsites.Counters
	33,  // 54: perfetto.protos.HeapProfileCallsites.Callsite.child_allocs:type_name -> perfetto.protos.HeapProfileCallsites.Counters
	3,   // 55: perfetto.protos.HeapProfileCallsites.InstanceStats.process:type_name -> perfetto.protos.AndroidProcessMetadata
	34,  // 56: perfetto.protos.HeapProfileCallsites.InstanceStats.callsites:type_name -> perfetto.protos.HeapProfileCallsites.Callsite
	37,  // 57: perfetto.protos.JavaHeapHistogram.Sample.type_count:type_name -> perfetto.protos.JavaHeapHistogram.TypeCount
	3,   // 58: perfetto.protos.JavaHeapHistogram.InstanceStats.process:type_name -> perfetto.protos.AndroidProcessMetadata
	38,  // 59: perfetto.protos.JavaHeapHistogram.InstanceStats.samples:type_name -> perfetto.protos.JavaHeapHistogram.Sample
	40,  // 60: perfetto.protos.JavaHeapStats.Sample.roots:type_name -> perfetto.protos.JavaHeapStats.HeapRoots
	3,   // 61: perfetto.protos.JavaHeapStats.InstanceStats.process:type_name -> perfetto.protos.AndroidProcessMetadata
	41,  // 62: perfetto.protos.JavaHeapStats.InstanceStats.samples:type_name -> perfetto.protos.JavaHeapStats.Sample
	3,   // 63: perfetto.protos.AndroidLmkReasonMetric.Process.process:type_name -> perfetto.protos.AndroidProcessMetadata
	44,  // 64: perfetto.protos.AndroidLmkReasonMetric.Lmk.processes:type_name -> perfetto.protos.AndroidLmkReasonMetric.Process
	48,  // 65: perfetto.protos.AndroidMemoryMetric.ProcessMetrics.total_counters:type_name -> perfetto.protos.AndroidMemoryMetric.ProcessMemoryCounters
	47,  // 66: perfetto.protos.AndroidMemoryMetric.ProcessMetrics.priority_breakdown:type_name -> perfetto.protos.AndroidMemoryMetric.PriorityBreakdown
	48,  // 67: perfetto.protos.AndroidMemoryMetric.PriorityBreakdown.counters:type_name -> perfetto.protos.AndroidMemoryMetric.ProcessMemoryCounters
	49,  // 68: perfetto.protos.AndroidMemoryMetric.ProcessMemoryCounters.anon_rss:type_name -> perfetto.protos.AndroidMemoryMetric.Counter
	49,  // 69: perfetto.protos.AndroidMemoryMetric.ProcessMemoryCounters.file_rss:type_name -> perfetto.protos.AndroidMemoryMetric.Counter
	49,  // 70: perfetto.protos.AndroidMemoryMetric.ProcessMemoryCounters.swap:type_name -> perfetto.protos.AndroidMemoryMetric.Counter
	49,  // 71: perfetto.protos.AndroidMemoryMetric.ProcessMemoryCounters.anon_and_swap:type_name -> perfetto.protos.AndroidMemoryMetric.Counter
	49,  // 72: perfetto.protos.AndroidMemoryMetric.ProcessMemoryCounters.java_heap:type_name -> perfetto.protos.AndroidMemoryMetric.Counter
	51,  // 73: perfetto.protos.AndroidMemoryUnaggregatedMetric.ProcessValues.mem_values:type_name -> perfetto.protos.AndroidMemoryUnaggregatedMetric.ProcessMemoryValues
	52,  // 74: perfetto.protos.AndroidMemoryUnaggregatedMetric.ProcessMemoryValues.anon_rss:type_name -> perfetto.protos.AndroidMemoryUnaggregatedMetric.Value
	52,  // 75: perfetto.protos.AndroidMemoryUnaggregatedMetric.ProcessMemoryValues.file_rss:type_name -> perfetto.protos.AndroidMemoryUnaggregatedMetric.Value
	52,  // 76: perfetto.protos.AndroidMemoryUnaggregatedMetric.ProcessMemoryValues.swap:type_name -> perfetto.protos.AndroidMemoryUnaggregatedMetric.Value
	52,  // 77: perfetto.protos.AndroidMemoryUnaggregatedMetric.ProcessMemoryValues.anon_and_swap:type_name -> perfetto.protos.AndroidMemoryUnaggregatedMetric.Value
	54,  // 78: perfetto.protos.AndroidPowerRails.PowerRails.energy_data:type_name -> perfetto.protos.AndroidPowerRails.EnergyData
	56,  // 79: perfetto.protos.AndroidStartupMetric.ToFirstFrame.main_thread_by_task_state:type_name -> perfetto.protos.AndroidStartupMetric.TaskStateBreakdown
	57,  // 80: perfetto.protos.AndroidStartupMetric.ToFirstFrame.time_activity_manager:type_name -> perfetto.protos.AndroidStartupMetric.Slice
	57,  // 81: perfetto.protos.AndroidStartupMetric.ToFirstFrame.time_activity_thread_main:type_name -> perfetto.protos.AndroidStartupMetric.Slice
	57,  // 82: perfetto.protos.AndroidStartupMetric.ToFirstFrame.time_bind_application:type_name -> perfetto.protos.AndroidStartupMetric.Slice
	57,  // 83: perfetto.protos.AndroidStartupMetric.ToFirstFrame.time_activity_start:type_name -> perfetto.protos.AndroidStartupMetric.Slice
	57,  // 84: perfetto.protos.AndroidStartupMetric.ToFirstFrame.time_activity_resume:type_name -> perfetto.protos.AndroidStartupMetric.Slice
	57,  // 85: perfetto.protos.AndroidStartupMetric.ToFirstFrame.time_choreographer:type_name -> perfetto.protos.AndroidStartupMetric.Slice
	57,  // 86: perfetto.protos.AndroidStartupMetric.ToFirstFrame.time_before_start_process:type_name -> perfetto.protos.AndroidStartupMetric.Slice
	57,  // 87: perfetto.protos.AndroidStartupMetric.ToFirstFrame.time_during_start_process:type_name -> perfetto.protos.AndroidStartupMetric.Slice
	57,  // 88: perfetto.protos.AndroidStartupMetric.ToFirstFrame.to_post_fork:type_name -> perfetto.protos.AndroidStartupMetric.Slice
	57,  // 89: perfetto.protos.AndroidStartupMetric.ToFirstFrame.to_activity_thread_main:type_name -> perfetto.protos.AndroidStartupMetric.Slice
	57,  // 90: perfetto.protos.AndroidStartupMetric.ToFirstFrame.to_bind_application:type_name -> perfetto.protos.AndroidStartupMetric.Slice
	57,  // 91: perfetto.protos.AndroidStartupMetric.ToFirstFrame.time_post_fork:type_name -> perfetto.protos.AndroidStartupMetric.Slice
	57,  // 92: perfetto.protos.AndroidStartupMetric.HscMetrics.full_startup:type_name -> perfetto.protos.AndroidStartupMetric.Slice
	58,  // 93: perfetto.protos.AndroidStartupMetric.Startup.to_first_frame:type_name -> perfetto.protos.AndroidStartupMetric.ToFirstFrame
	3,   // 94: perfetto.protos.AndroidStartupMetric.Startup.process:type_name -> perfetto.protos.AndroidProcessMetadata
	59,  // 95: perfetto.protos.AndroidStartupMetric.Startup.hsc:type_name -> perfetto.protos.AndroidStartupMetric.HscMetrics
	62,  // 96: perfetto.protos.AndroidThreadTimeInStateMetric.Thread.metrics_by_core_type:type_name -> perfetto.protos.AndroidThreadTimeInStateMetric.MetricsByCoreType
	3,   // 97: perfetto.protos.AndroidThreadTimeInStateMetric.Process.metadata:type_name -> perfetto.protos.AndroidProcessMetadata
	62,  // 98: perfetto.protos.AndroidThreadTimeInStateMetric.Process.metrics_by_core_type:type_name -> perfetto.protos.AndroidThreadTimeInStateMetric.MetricsByCoreType
	63,  // 99: perfetto.protos.AndroidThreadTimeInStateMetric.Process.threads:type_name -> perfetto.protos.AndroidThreadTimeInStateMetric.Thread
	3,   // 100: perfetto.protos.UnmappedJavaSymbols.ProcessSymbols.process_metadata:type_name -> perfetto.protos.AndroidProcessMetadata
	65,  // 101: perfetto.protos.UnmappedJavaSymbols.ProcessSymbols.field:type_name -> perfetto.protos.UnmappedJavaSymbols.Field
	102, // [102:102] is the sub-list for method output_type
	102, // [102:102] is the sub-list for method input_type
	102, // [102:102] is the sub-list for extension type_name
	102, // [102:102] is the sub-list for extension extendee
	0,   // [0:102] is the sub-list for field type_name
}

func init() { file_perfetto_metrics_perfetto_merged_metrics_proto_init() }
func file_perfetto_metrics_perfetto_merged_metrics_proto_init() {
	if File_perfetto_metrics_perfetto_merged_metrics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidBatteryMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidCpuMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidDisplayMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidProcessMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeapProfileCallsites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessRenderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidHwuiMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidIonMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JavaHeapHistogram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JavaHeapStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidLmkMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidLmkReasonMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidMemoryMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidMemoryUnaggregatedMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidPackageList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidPowerRails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidStartupMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidSurfaceflingerMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidTaskNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidThreadTimeInStateMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmappedJavaSymbols); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsymbolizedFrames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidBatteryMetric_BatteryCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidBatteryMetric_BatteryAggregates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidCpuMetric_Metrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidCpuMetric_CoreData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidCpuMetric_CoreTypeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidCpuMetric_Thread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidCpuMetric_Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidProcessMetadata_Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeapProfileCallsites_Frame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeapProfileCallsites_Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeapProfileCallsites_Callsite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeapProfileCallsites_InstanceStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidIonMetric_Buffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JavaHeapHistogram_TypeCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JavaHeapHistogram_Sample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JavaHeapHistogram_InstanceStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JavaHeapStats_HeapRoots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JavaHeapStats_Sample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JavaHeapStats_InstanceStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidLmkMetric_ByOomScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidLmkReasonMetric_Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidLmkReasonMetric_Lmk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidMemoryMetric_ProcessMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidMemoryMetric_PriorityBreakdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidMemoryMetric_ProcessMemoryCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidMemoryMetric_Counter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidMemoryUnaggregatedMetric_ProcessValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidMemoryUnaggregatedMetric_ProcessMemoryValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidMemoryUnaggregatedMetric_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidPackageList_Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidPowerRails_EnergyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidPowerRails_PowerRails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidStartupMetric_TaskStateBreakdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidStartupMetric_Slice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidStartupMetric_ToFirstFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidStartupMetric_HscMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidStartupMetric_Startup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidTaskNames_Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidThreadTimeInStateMetric_MetricsByCoreType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidThreadTimeInStateMetric_Thread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidThreadTimeInStateMetric_Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmappedJavaSymbols_Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmappedJavaSymbols_ProcessSymbols); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsymbolizedFrames_Frame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceMetadata_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_perfetto_metrics_perfetto_merged_metrics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   69,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_perfetto_metrics_perfetto_merged_metrics_proto_goTypes,
		DependencyIndexes: file_perfetto_metrics_perfetto_merged_metrics_proto_depIdxs,
		MessageInfos:      file_perfetto_metrics_perfetto_merged_metrics_proto_msgTypes,
	}.Build()
	File_perfetto_metrics_perfetto_merged_metrics_proto = out.File
	file_perfetto_metrics_perfetto_merged_metrics_proto_rawDesc = nil
	file_perfetto_metrics_perfetto_merged_metrics_proto_goTypes = nil
	file_perfetto_metrics_perfetto_merged_metrics_proto_depIdxs = nil
}
